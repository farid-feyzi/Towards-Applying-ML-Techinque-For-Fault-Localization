Closure-22.fixed.lines	com/google/javascript/jscomp/CheckSideEffects.java#101#    if (n.isExprResult() || n.isBlock()) {
Closure-22.fixed.lines	com/google/javascript/jscomp/CheckSideEffects.java#107#    if (n.isQualifiedName() && n.getJSDocInfo() != null) {
Closure-52.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#745#    return len > 0 && s.charAt(0) != '0';
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#517#        int functionType = functionNode.getFunctionType();
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#518#        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#519#          errorReporter.error(
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#520#            "unnamed function statement",
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#521#            sourceName,
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#522#            functionNode.getLineno(), "", 0);
Closure-81.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#523#        }
Closure-101.fixed.lines	com/google/javascript/jscomp/CommandLineRunner.java#434#    options.closurePass = flags.process_closure_primitives;
Closure-60.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#108#      case Token.VOID:
Closure-60.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#109#        return TernaryValue.FALSE;
Closure-60.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#138#        if (!mayHaveSideEffects(n.getFirstChild())) {
Closure-60.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#140#        }
Closure-60.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#141#        break;
Closure-10.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#1417#      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);
Closure-133.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#2401#    unreadToken = NO_UNREAD_TOKEN;
Closure-108.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#259#    private final Set<Node> injectedDecls = Sets.newHashSet();
Closure-108.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#317#        injectedDecls.clear();
Closure-108.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#434#            injectedDecls.add(newDecl.getFirstChild());
Closure-108.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#584#        if (info != null && !injectedDecls.contains(n)) {
Closure-75.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#313#    if (rawJsString.contains("\u000b")) {
Closure-75.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#315#      return null;
Closure-75.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#316#    }
Closure-75.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#378#        return TernaryValue.UNKNOWN;  // IE says "no", EcmaScript says "yes"
Closure-88.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#327#        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
Closure-88.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#331#        Node rhs = n.getNext();
Closure-88.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#332#        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
Closure-88.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#333#        if (state == VariableLiveness.READ) {
Closure-88.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#334#          return state;
Closure-88.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#335#        }
Closure-19.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#172#      case Token.THIS:
Closure-19.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#174#        break;
Closure-4.fixed.lines	com/google/javascript/rhino/jstype/NamedType.java#190#    if (detectInheritanceCycle()) {
Closure-4.fixed.lines	com/google/javascript/rhino/jstype/NamedType.java#202#    if (detectInheritanceCycle()) {
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#329#      case Token.ADD:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#334#      case Token.DIV:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#335#      case Token.EQ:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#336#      case Token.GE:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#337#      case Token.GT:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#338#      case Token.LE:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#339#      case Token.LSH:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#340#      case Token.LT:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#341#      case Token.MOD:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#342#      case Token.MUL:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#343#      case Token.NE:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#344#      case Token.RSH:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#345#      case Token.SHEQ:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#346#      case Token.SHNE:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#347#      case Token.SUB:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#348#      case Token.URSH:
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#349#        return isValidDefineValue(val.getFirstChild(), defines)
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#350#            && isValidDefineValue(val.getLastChild(), defines);
Closure-94.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#355#      case Token.POS:
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1580#      if (functionType.isOrdinaryFunction() &&
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1581#          !functionType.getTypeOfThis().isUnknownType() &&
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1582#          !functionType.getTypeOfThis().isNativeObjectType() &&
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1583#          !(child.getType() == Token.GETELEM ||
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1584#            child.getType() == Token.GETPROP)) {
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1585#        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
Closure-69.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1586#      }
Closure-114.fixed.lines	com/google/javascript/jscomp/NameAnalyzer.java#578#        } else if (!(parent.isCall() && parent.getFirstChild() == n)) {
Closure-37.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#667#      if (!bodyNode.isBlock()) {
Closure-37.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#671#        Preconditions.checkState(config.isIdeMode);
Closure-37.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#672#        bodyNode = IR.block();
Closure-37.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#673#      }
Closure-37.fixed.lines	com/google/javascript/jscomp/NodeTraversal.java#541#            body.isBlock(), body);
Closure-47.fixed.lines	com/google/javascript/jscomp/SourceMap.java#138#    int lineBaseOffset = 1;
Closure-47.fixed.lines	com/google/javascript/jscomp/SourceMap.java#139#    if (generator instanceof SourceMapGeneratorV1
Closure-47.fixed.lines	com/google/javascript/jscomp/SourceMap.java#140#        || generator instanceof SourceMapGeneratorV2) {
Closure-47.fixed.lines	com/google/javascript/jscomp/SourceMap.java#141#      lineBaseOffset = 0;
Closure-47.fixed.lines	com/google/javascript/jscomp/SourceMap.java#142#    }
Closure-47.fixed.lines	com/google/javascript/jscomp/SourceMap.java#146#        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),
Closure-47.fixed.lines	com/google/debugging/sourcemap/SourceMapConsumerV3.java#489#        .setLineNumber(entry.getSourceLine() + 1)
Closure-47.fixed.lines	com/google/debugging/sourcemap/SourceMapConsumerV3.java#490#        .setColumnPosition(entry.getSourceColumn() + 1);
Closure-70.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1745#                  jsDocParameter.getJSType(), false);
Closure-123.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#285#        Context rhsContext = getContextForNoInOperator(context);
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#568#      if (loopNode.isForEach()) {
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#569#        errorReporter.error(
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#570#            "unsupported language extension: for each",
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#571#            sourceName,
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#572#            loopNode.getLineno(), "", 0);
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#575#        return newNode(Token.EXPR_RESULT, Node.newNumber(0));
Closure-42.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#576#      }
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1358#    int lineStartChar = -1;
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1365#            lineStartChar = stream.getCharno() + 1;
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1384#          lineStartChar = 0;
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1392#          boolean isEOC = token == JsDocToken.EOC;
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1393#          if (!isEOC) {
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1394#            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1395#              int numSpaces = stream.getCharno() - lineStartChar;
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1396#              for (int i = 0; i < numSpaces; i++) {
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1397#                builder.append(' ');
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1398#              }
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1399#              lineStartChar = -1;
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1400#            } else if (builder.length() > 0) {
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1402#              builder.append(' ');
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1403#            }
Closure-32.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1404#          }
Closure-111.fixed.lines	com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java#54#          return topType.isAllType() ?
Closure-111.fixed.lines	com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java#55#              getNativeType(ARRAY_TYPE) : topType;
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#115#      Node gramps = parent.getParent();
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#116#      if (NodeUtil.isObjectLitKey(parent, gramps)) {
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#117#        JSDocInfo maybeLends = gramps.getJSDocInfo();
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#118#        if (maybeLends != null &&
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#119#            maybeLends.getLendsName() != null &&
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#120#            maybeLends.getLendsName().endsWith(".prototype")) {
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#121#          return false;
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#122#        }
Closure-91.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#123#      }
Closure-1.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#379#    if (!removeGlobals) {
Closure-1.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#380#      return;
Closure-1.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#381#    }
Closure-79.fixed.lines	com/google/javascript/jscomp/VarCheck.java#221#    compiler.reportCodeChange();
Closure-79.fixed.lines	com/google/javascript/jscomp/Normalize.java#122#        .traverseRoots(externs, root);
Closure-104.fixed.lines	com/google/javascript/rhino/jstype/UnionType.java#291#    if (!result.isNoType()) {
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#341#      Node target = assign.getFirstChild();
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#342#      if (!validAssignmentTarget(target)) {
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#343#        errorReporter.error(
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#344#          "invalid assignment target",
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#345#          sourceName,
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#346#          target.getLineno(), "", 0);
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#347#      }
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#804#        if (type == Token.INC || type == Token.DEC) {
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#805#          if (!validAssignmentTarget(operand)) {
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#806#            String msg = (type == Token.INC)
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#807#                ? "invalid increment target"
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#808#                : "invalid decrement target";
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#809#            errorReporter.error(
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#810#              msg,
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#811#              sourceName,
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#812#              operand.getLineno(), "", 0);
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#813#          }
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#814#        }
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#824#    private boolean validAssignmentTarget(Node target) {
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#825#      switch (target.getType()) {
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#826#        case Token.NAME:
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#827#        case Token.GETPROP:
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#828#        case Token.GETELEM:
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#829#          return true;
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#830#      }
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#831#      return false;
Closure-84.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#832#    }
Closure-57.fixed.lines	com/google/javascript/jscomp/ClosureCodingConvention.java#197#          if (target != null && target.getType() == Token.STRING) {
Closure-27.fixed.lines	com/google/javascript/rhino/IR.java#111#  private static Node blockUnchecked(Node stmt) {
Closure-27.fixed.lines	com/google/javascript/rhino/IR.java#112#    return new Node(Token.BLOCK, stmt);
Closure-27.fixed.lines	com/google/javascript/rhino/IR.java#113#  }
Closure-27.fixed.lines	com/google/javascript/rhino/IR.java#227#    Preconditions.checkState(tryBody.isBlock());
Closure-27.fixed.lines	com/google/javascript/rhino/IR.java#228#    Preconditions.checkState(finallyBody.isBlock());
Closure-27.fixed.lines	com/google/javascript/rhino/IR.java#236#    Node catchBody = blockUnchecked(catchNode).copyInformationFrom(catchNode);
Closure-8.fixed.lines	com/google/javascript/jscomp/CollapseVariableDeclarations.java#204#          && !isNamedParameter(var)
Closure-8.fixed.lines	com/google/javascript/jscomp/CollapseVariableDeclarations.java#209#  private boolean isNamedParameter(Var v) {
Closure-8.fixed.lines	com/google/javascript/jscomp/CollapseVariableDeclarations.java#210#    return v.getParentNode().isParamList();
Closure-8.fixed.lines	com/google/javascript/jscomp/CollapseVariableDeclarations.java#211#  }
Closure-15.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#102#        if (n.isDelProp()) {
Closure-15.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#103#          return true;
Closure-15.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#104#        }
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#361#      for (BasicBlock block = ref.getBasicBlock();
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#362#           block != null; block = block.getParent()) {
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#363#        if (block.isFunction) {
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#364#          break;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#365#        } else if (block.isLoop) {
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#366#          return false;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#367#        }
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#368#      }
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#553#    private final boolean isFunction;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#558#    private final boolean isLoop;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#571#      this.isFunction = root.getType() == Token.FUNCTION;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#573#      if (root.getParent() != null) {
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#574#        int pType = root.getParent().getType();
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#575#        this.isLoop = pType == Token.DO ||
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#576#            pType == Token.WHILE ||
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#577#            pType == Token.FOR;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#578#      } else {
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#579#        this.isLoop = false;
Closure-98.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#580#      }
Closure-118.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#495#        if (child.isQuotedString()) {
Closure-118.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#496#          continue;
Closure-118.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#497#        }
Closure-65.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#1015#        case '\0': sb.append("\\000"); break;
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#170#    private final Node aliasDefinition;
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#173#    AliasedTypeNode(Node typeReference, Node aliasDefinition,
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#176#      this.aliasDefinition = aliasDefinition;
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#182#      String typeName = typeReference.getString();
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#183#      String aliasExpanded =
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#184#          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#185#      Preconditions.checkState(typeName.startsWith(aliasName));
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#186#      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));
Closure-16.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#474#          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));
Closure-66.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#516#        } else {
Closure-66.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#518#          typeable = false;
Closure-38.fixed.lines	com/google/javascript/jscomp/CodeConsumer.java#245#    if ((x < 0 || negativeZero) && prev == '-') {
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1521#      if (inferred && rhsValue != null && rhsValue.isFunction()) {
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1523#        if (info != null) {
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1524#          inferred = false;
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1525#        } else if (!scope.isDeclared(qName, false) &&
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1526#                   n.isUnscopedQualifiedName()) {
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1527#          inferred = false;
Closure-48.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1528#        }
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1413#          ObjectType qVarType = ObjectType.cast(qVar.getType());
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1414#          if (qVarType != null &&
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1415#              rhsValue != null &&
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1416#              rhsValue.getType() == Token.OBJECTLIT) {
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1417#            typeRegistry.resetImplicitPrototype(
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1418#                rhsValue.getJSType(), qVarType.getImplicitPrototype());
Closure-54.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1419#          } else if (!qVar.isTypeInferred()) {
Closure-54.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#365#    PrototypeObjectType oldPrototype = this.prototype;
Closure-54.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#366#    boolean replacedPrototype = oldPrototype != null;
Closure-54.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#372#    if (oldPrototype != null) {
Closure-54.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#375#      oldPrototype.setOwnerFunction(null);
Closure-54.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#376#    }
Closure-129.fixed.lines	com/google/javascript/jscomp/PrepareAst.java#166#      while (first.isCast()) {
Closure-129.fixed.lines	com/google/javascript/jscomp/PrepareAst.java#167#        first = first.getFirstChild();
Closure-129.fixed.lines	com/google/javascript/jscomp/PrepareAst.java#168#      }
Closure-24.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#278#        if (parent.isVar() &&
Closure-24.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#279#            n.hasChildren() && n.getFirstChild().isQualifiedName()) {
Closure-24.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#287#        } else if (v.isBleedingFunction()) {
Closure-24.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#290#        } else if (parent.getType() == Token.LP) {
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#523#        if (maybeExpr.getType() == Token.EXPR_RESULT) {
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#530#          if (maybeExpr.getFirstChild().getType() == Token.CALL) {
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#531#            Node calledFn = maybeExpr.getFirstChild().getFirstChild();
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#535#            if (calledFn.getType() == Token.GETELEM) {
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#536#              return false;
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#537#            } else if (calledFn.getType() == Token.GETPROP &&
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#538#                       calledFn.getLastChild().getString().startsWith("on")) {
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#539#              return false;
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#540#            }
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#541#          }
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#543#          return true;
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#544#        }
Closure-87.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#545#        return false;
Closure-107.fixed.lines	com/google/javascript/jscomp/CommandLineRunner.java#862#      options.setWarningLevel(JsMessageVisitor.MSG_CONVENTIONS, CheckLevel.OFF);
Closure-92.fixed.lines	com/google/javascript/jscomp/ProcessClosurePrimitives.java#789#          int indexOfDot = namespace.lastIndexOf('.');
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1192#    Map<TemplateType, JSType> inferred = Maps.filterKeys(
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1193#        inferTemplateTypesFromParameters(fnType, n),
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1194#        new Predicate<TemplateType>() {
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1196#          @Override
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1197#          public boolean apply(TemplateType key) {
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1198#            return keys.contains(key);
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1199#          }}
Closure-112.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1200#        );
Closure-2.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1572#    if (implicitProto == null) {
Closure-2.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1575#      currentPropertyNames = ImmutableSet.of();
Closure-2.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1576#    } else {
Closure-2.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1578#    }
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#292#      while (oldParams.hasNext()) {
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#293#        paramBuilder.newParameterFromNode(oldParams.next());
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#294#      }
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#486#    if (!isVarArgs) {
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#487#      while (oldParameterType != null && !isVarArgs) {
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#488#        builder.newParameterFromNode(oldParameterType);
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#489#        oldParameterType = oldParameterType.getNext();
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#490#      }
Closure-41.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#491#    }
Closure-120.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#431#          if (ref.getSymbol().getScope() != ref.scope) {
Closure-120.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#432#            return false;
Closure-120.fixed.lines	com/google/javascript/jscomp/ReferenceCollectingCallback.java#433#          }
Closure-73.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#1045#            if (c > 0x1f && c < 0x7f) {
Closure-34.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#122#        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
Closure-34.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#752#      cc.addOp(opStr, true);
Closure-34.fixed.lines	com/google/javascript/jscomp/CodePrinter.java#334#        if (getLastChar() != ' ' && op.charAt(0) != ',') {
Closure-44.fixed.lines	com/google/javascript/jscomp/CodeConsumer.java#194#    } else if (c == '/' && getLastChar() == '/') {
Closure-44.fixed.lines	com/google/javascript/jscomp/CodeConsumer.java#200#      append(" ");
Closure-7.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#613#        if (resultEqualsValue) {
Closure-7.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#615#          return ctorType.getGreatestSubtype(type);
Closure-7.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#616#        } else {
Closure-7.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#618#          return type.isSubtype(ctorType) ? null : type;
Closure-7.fixed.lines	com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#619#        }
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#725#    JSType type = getJSType(n);
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#726#    if (dereference) {
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#727#      ObjectType dereferenced = type.dereference();
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#728#      if (dereferenced != null) {
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#729#        type = dereferenced;
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#730#      }
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#731#    }
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#734#    if (type.isFunctionPrototypeType() ||
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#735#        (type.toObjectType() != null &&
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#736#         type.toObjectType().getConstructor() != null)) {
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#737#      return type.toString();
Closure-117.fixed.lines	com/google/javascript/jscomp/TypeValidator.java#738#    }
Closure-97.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#698#          long lvalLong = lvalInt & 0xffffffffL;
Closure-97.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#699#          result = lvalLong >>> rvalInt;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#300#          if (n.getNext() != null) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#301#            state = isVariableReadBeforeKill(
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#302#                n.getNext(), variable);
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#303#            if (state == VariableLiveness.KILL) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#304#              state = VariableLiveness.MAYBE_LIVE;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#305#            }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#306#          }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#307#          break;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#313#          if (n.getNext() != null && n.getNext().getNext() != null) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#314#            state = checkHookBranchReadBeforeKill(
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#315#                n.getNext(), n.getNext().getNext(), variable);
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#316#          }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#317#          break;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#323#            if (state != VariableLiveness.MAYBE_LIVE) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#324#              break;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#325#            }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#326#          }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#327#      }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#354#    if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#355#      return VariableLiveness.MAYBE_LIVE;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#356#    }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#379#        VariableLiveness v1 = isVariableReadBeforeKill(
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#380#          n.getFirstChild(), variable);
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#381#        VariableLiveness v2 = isVariableReadBeforeKill(
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#382#          n.getLastChild(), variable);
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#385#        if (v1 != VariableLiveness.MAYBE_LIVE) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#386#          return v1;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#387#        } else if (v2 == VariableLiveness.READ) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#388#          return VariableLiveness.READ;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#389#        } else {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#390#          return VariableLiveness.MAYBE_LIVE;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#391#        }
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#393#        VariableLiveness first = isVariableReadBeforeKill(
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#394#            n.getFirstChild(), variable);
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#395#        if (first != VariableLiveness.MAYBE_LIVE) {
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#396#          return first;
Closure-76.fixed.lines	com/google/javascript/jscomp/DeadAssignmentsElimination.java#397#        }
Closure-125.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1661#      if (fnType != null && fnType.hasInstanceType()) {
Closure-58.fixed.lines	com/google/javascript/jscomp/LiveVariablesAnalysis.java#206#          if (NodeUtil.isName(lhs)) {
Closure-58.fixed.lines	com/google/javascript/jscomp/LiveVariablesAnalysis.java#209#          } else {
Closure-58.fixed.lines	com/google/javascript/jscomp/LiveVariablesAnalysis.java#210#            computeGenKill(lhs, gen, kill, conditional);
Closure-58.fixed.lines	com/google/javascript/jscomp/LiveVariablesAnalysis.java#211#          }
Closure-28.fixed.lines	com/google/javascript/jscomp/InlineCostEstimator.java#102#    @Override
Closure-28.fixed.lines	com/google/javascript/jscomp/InlineCostEstimator.java#103#    void addConstant(String newcode) {
Closure-28.fixed.lines	com/google/javascript/jscomp/InlineCostEstimator.java#104#      add("0");
Closure-28.fixed.lines	com/google/javascript/jscomp/InlineCostEstimator.java#105#    }
Closure-130.fixed.lines	com/google/javascript/jscomp/CollapseProperties.java#172#      if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
Closure-63.fixed.lines	com/google/javascript/jscomp/LightweightMessageFormatter.java#98#          && 0 <= charno && charno <= sourceExcerpt.length()) {
Closure-13.fixed.lines	com/google/javascript/jscomp/PeepholeOptimizationsPass.java#126#        Node next = c.getNext();
Closure-102.fixed.lines	com/google/javascript/jscomp/Normalize.java#89#    removeDuplicateDeclarations(root);
Closure-82.fixed.lines	com/google/javascript/rhino/jstype/JSType.java#163#    return isNoType() || isNoObjectType() || isNoResolvedType() ||
Closure-82.fixed.lines	com/google/javascript/rhino/jstype/JSType.java#164#        (registry.getNativeFunctionType(
Closure-82.fixed.lines	com/google/javascript/rhino/jstype/JSType.java#165#             JSTypeNative.LEAST_FUNCTION_TYPE) == this);
Closure-21.fixed.lines	com/google/javascript/jscomp/CheckSideEffects.java#101#    if (n.isExprResult() || n.isBlock()) {
Closure-21.fixed.lines	com/google/javascript/jscomp/CheckSideEffects.java#113#    if (!isResultUsed &&
Closure-51.fixed.lines	com/google/javascript/jscomp/CodeConsumer.java#241#    if ((long) x == x && !isNegativeZero(x)) {
Closure-64.fixed.lines	com/google/javascript/jscomp/Compiler.java#1432#        String code = toSource(root, sourceMap, inputSeqNum == 0);
Closure-64.fixed.lines	com/google/javascript/jscomp/Compiler.java#1461#    return toSource(n, null, true);
Closure-64.fixed.lines	com/google/javascript/jscomp/Compiler.java#1467#  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {
Closure-64.fixed.lines	com/google/javascript/jscomp/Compiler.java#1473#    builder.setTagAsStrict(firstOutput &&
Closure-119.fixed.lines	com/google/javascript/jscomp/GlobalNamespace.java#366#              case Token.CATCH:
Closure-99.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#92#           jsDoc.isInterface() ||
Closure-99.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#126#        if (NodeUtil.isGet(lhs)) {
Closure-99.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#131#          Node llhs = lhs.getFirstChild();
Closure-99.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#132#          if (llhs.getType() == Token.GETPROP &&
Closure-99.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#133#              llhs.getLastChild().getString().equals("prototype")) {
Closure-99.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#136#        }
Closure-14.fixed.lines	com/google/javascript/jscomp/ControlFlowAnalysis.java#767#              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
Closure-9.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#119#    filename = filename.replace("\\", "/");
Closure-9.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#184#      String moduleName = guessCJSModuleName(script.getSourceFileName());
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#170#          Node fallThrough = computeFollowing(n);
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#183#    while (next != null && next.getType() == Token.BLOCK) {
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#184#      if (next.hasChildren()) {
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#185#        next = next.getFirstChild();
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#186#      } else {
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#187#        next = computeFollowing(next);
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#188#      }
Closure-85.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#189#    }
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1477#    StringBuilder sb = null;
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1483#        if (sb == null) {
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1484#          sb = new StringBuilder();
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1485#        } else {
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1490#        if (sb != null) {
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1494#          sb = null;
Closure-105.fixed.lines	com/google/javascript/jscomp/FoldConstants.java#1502#    if (sb != null) {
Closure-26.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#128#    private Set<String> modulesWithExports = Sets.newHashSet();
Closure-26.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#208#      if (!modulesWithExports.contains(moduleName)) {
Closure-26.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#209#        return;
Closure-26.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#210#      }
Closure-26.fixed.lines	com/google/javascript/jscomp/ProcessCommonJSModules.java#232#      modulesWithExports.add(moduleName);
Closure-56.fixed.lines	com/google/javascript/jscomp/SourceFile.java#242#      if (pos >= js.length()) {
Closure-56.fixed.lines	com/google/javascript/jscomp/SourceFile.java#244#      } else {
Closure-56.fixed.lines	com/google/javascript/jscomp/SourceFile.java#245#        return js.substring(pos, js.length());
Closure-56.fixed.lines	com/google/javascript/jscomp/SourceFile.java#246#      }
Closure-33.fixed.lines	com/google/javascript/rhino/jstype/PrototypeObjectType.java#557#    if (hasReferenceName()) {
Closure-33.fixed.lines	com/google/javascript/rhino/jstype/PrototypeObjectType.java#558#      return;
Closure-33.fixed.lines	com/google/javascript/rhino/jstype/PrototypeObjectType.java#559#    }
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#420#    private List<Node> lentObjectLiterals = null;
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#548#      if (n.getParent() != null && NodeUtil.isStatement(n) &&
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#549#          lentObjectLiterals != null) {
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#550#        for (Node objLit : lentObjectLiterals) {
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#551#          defineObjectLiteral(objLit);
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#552#        }
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#553#        lentObjectLiterals.clear();
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#554#      }
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#588#          JSDocInfo info = n.getJSDocInfo();
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#589#          if (info != null &&
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#590#              info.getLendsName() != null) {
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#591#            if (lentObjectLiterals == null) {
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#592#              lentObjectLiterals = Lists.newArrayList();
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#593#            }
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#594#            lentObjectLiterals.add(n);
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#595#          } else {
Closure-43.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#597#          }
Closure-90.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#880#    if (maybeTypeOfThis != null) {
Closure-90.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#881#      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
Closure-90.fixed.lines	com/google/javascript/rhino/jstype/FunctionType.java#882#    }
Closure-90.fixed.lines	com/google/javascript/jscomp/FunctionTypeBuilder.java#184#      if (!type.restrictByNotNullOrUndefined().isSubtype(
Closure-110.fixed.lines	com/google/javascript/rhino/Node.java#554#    if (n == null) {
Closure-110.fixed.lines	com/google/javascript/rhino/Node.java#555#      throw new RuntimeException("node is not a child");
Closure-110.fixed.lines	com/google/javascript/rhino/Node.java#556#    }
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#358#        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#367#        } else if (isVar || isFunctionDecl) {
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#368#          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#370#          Node value = v.getInitialValue() != null ?
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#371#              v.getInitialValue() :
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#373#          Node varNode = null;
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#385#          if (isFunctionDecl) {
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#387#            Node existingName = v.getNameNode();
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#396#            Node newName = IR.name("").useSourceInfoFrom(existingName);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#397#            value.replaceChild(existingName, newName);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#399#            varNode = IR.var(existingName).useSourceInfoFrom(existingName);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#400#            grandparent.replaceChild(parent, varNode);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#401#          } else {
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#402#            if (value != null) {
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#405#              value.detachFromParent();
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#406#            }
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#407#            varNode = parent;
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#408#          }
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#422#            if (isHoisted) {
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#423#              grandparent.addChildToFront(newDecl);
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#424#            } else {
Closure-110.fixed.lines	com/google/javascript/jscomp/ScopedAliases.java#426#            }
Closure-71.fixed.lines	com/google/javascript/jscomp/CheckAccessControls.java#416#      boolean isOverride = parent.getJSDocInfo() != null &&
Closure-122.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#252#    Pattern p = Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]");
Closure-122.fixed.lines	com/google/javascript/jscomp/parsing/IRFactory.java#253#    if (p.matcher(comment.getValue()).find()) {
Closure-68.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#868#                  }
Closure-68.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1709#    restoreLookAhead(token);
Closure-68.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1762#      restoreLookAhead(token);
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#899#      if (n.getType() == Token.GETPROP && !scope.isGlobal() &&
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#900#          isQnameRootedInGlobalScope(n)) {
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#901#        Scope globalScope = scope.getGlobalScope();
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#905#        if (!globalScope.isDeclared(variableName, false)) {
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#906#          scopeToDeclareIn = scope.getGlobalScope();
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#907#        }
Closure-95.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#908#      }
Closure-5.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#176#          if (gramps.isDelProp()) {
Closure-5.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#177#            return false;
Closure-5.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#178#          }
Closure-18.fixed.lines	com/google/javascript/jscomp/Compiler.java#1288#      if (options.dependencyOptions.needsManagement()) {
Closure-36.fixed.lines	com/google/javascript/jscomp/InlineVariables.java#575#          if (convention.getSingletonGetterClassName(callNode) != null) {
Closure-36.fixed.lines	com/google/javascript/jscomp/InlineVariables.java#576#            return false;
Closure-36.fixed.lines	com/google/javascript/jscomp/InlineVariables.java#577#          }
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#170#            if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#177#    private boolean inFinally(Node parent, Node child) {
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#178#      if (parent == null || parent.isFunction()) {
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#179#        return false;
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#180#      } else if (NodeUtil.isTryFinallyNode(parent, child)) {
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#181#        return true;
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#182#      } else {
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#183#        return inFinally(parent.getParent(), parent);
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#184#      }
Closure-127.fixed.lines	com/google/javascript/jscomp/UnreachableCodeElimination.java#185#    }
Closure-89.fixed.lines	com/google/javascript/jscomp/GlobalNamespace.java#920#      if (aliasingGets > 0) {
Closure-89.fixed.lines	com/google/javascript/jscomp/CollapseProperties.java#484#    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {
Closure-89.fixed.lines	com/google/javascript/jscomp/CollapseProperties.java#485#      checkForHosedThisReferences(rvalue, refName.docInfo, refName);
Closure-89.fixed.lines	com/google/javascript/jscomp/CollapseProperties.java#486#    }
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#907#    int lhType = getNormalizedNodeType(left);
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#908#    int rhType = getNormalizedNodeType(right);
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1074#  private int getNormalizedNodeType(Node n) {
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1075#    int type = n.getType();
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1076#    if (type == Token.NOT) {
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1077#      TernaryValue value = NodeUtil.getPureBooleanValue(n);
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1078#      switch (value) {
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1079#        case TRUE:
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1080#          return Token.TRUE;
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1081#        case FALSE:
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1082#          return Token.FALSE;
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1083#      }
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1084#    }
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1085#    return type;
Closure-74.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1086#  }
Closure-109.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1908#    if (token == JsDocToken.QMARK) {
Closure-109.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1909#      return newNode(Token.QMARK);
Closure-109.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1910#    } else {
Closure-109.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1911#      return parseBasicTypeExpression(token);
Closure-109.fixed.lines	com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1912#    }
Closure-61.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#958#      if (nameNode.getFirstChild().getType() == Token.NAME) {
Closure-61.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#959#        String namespaceName = nameNode.getFirstChild().getString();
Closure-61.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#960#        if (namespaceName.equals("Math")) {
Closure-61.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#961#          return false;
Closure-61.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#962#        }
Closure-61.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#963#      }
Closure-132.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#782#              !mayEffectMutableState(lhs) &&
Closure-132.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#783#              (!mayHaveSideEffects(cond) ||
Closure-132.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#784#                  (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {
Closure-53.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#331#      if (nodes.isEmpty()) {
Closure-53.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#332#        replacement = new Node(Token.TRUE);
Closure-53.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#333#      } else {
Closure-53.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#353#      }
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1451#    for (int i = 0; current != null; i++) {
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1452#      if (i != intIndex) {
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1453#        if (mayHaveSideEffects(current)) {
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1454#          return n;
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1455#        }
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1456#      } else {
Closure-23.fixed.lines	com/google/javascript/jscomp/PeepholeFoldConstants.java#1458#      }
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#99#      int pType = parent.getType();
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#100#      if (!(pType == Token.BLOCK ||
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#101#            pType == Token.SCRIPT ||
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#102#            pType == Token.NAME ||
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#103#            pType == Token.ASSIGN)) {
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#104#        return false;
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#105#      }
Closure-100.fixed.lines	com/google/javascript/jscomp/CheckGlobalThis.java#153#    return parent != null && NodeUtil.isGet(parent);
Closure-80.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#1262#      case Token.DELPROP:
Closure-80.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#2911#      case Token.DELPROP:
Closure-83.fixed.lines	com/google/javascript/jscomp/CommandLineRunner.java#334#        String param = null;
Closure-83.fixed.lines	com/google/javascript/jscomp/CommandLineRunner.java#335#        try {
Closure-83.fixed.lines	com/google/javascript/jscomp/CommandLineRunner.java#336#          param = params.getParameter(0);
Closure-83.fixed.lines	com/google/javascript/jscomp/CommandLineRunner.java#337#        } catch (CmdLineException e) {}
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#763#      if (foundType == null) {
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#764#        ObjectType maybeType = ObjectType.cast(
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#765#            registry.getGreatestSubtypeWithProperty(type, field));
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#769#        if (maybeType != null && maybeType.hasOwnProperty(field)) {
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#770#          foundType = maybeType;
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#771#        }
Closure-103.fixed.lines	com/google/javascript/jscomp/DisambiguateProperties.java#772#      }
Closure-103.fixed.lines	com/google/javascript/jscomp/ControlFlowAnalysis.java#894#      case Token.INSTANCEOF:
Closure-50.fixed.lines	com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#376#      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {
Closure-50.fixed.lines	com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#389#    if (right != null && right.getType() == Token.STRING
Closure-50.fixed.lines	com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#390#        && ",".equals(right.getString())) {
Closure-50.fixed.lines	com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#392#      n.removeChild(right);
Closure-50.fixed.lines	com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#393#      reportCodeChange();
Closure-50.fixed.lines	com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#394#    }
Closure-20.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#220#      if (value != null && value.getNext() == null &&
Closure-20.fixed.lines	com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#221#          NodeUtil.isImmutableValue(value)) {
Closure-131.fixed.lines	com/google/javascript/rhino/TokenStream.java#194#          Character.isIdentifierIgnorable(s.charAt(0)) ||
Closure-131.fixed.lines	com/google/javascript/rhino/TokenStream.java#200#        if (Character.isIdentifierIgnorable(s.charAt(i)) ||
Closure-12.fixed.lines	com/google/javascript/jscomp/MaybeReachingVariableUse.java#160#    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);
Closure-12.fixed.lines	com/google/javascript/jscomp/MaybeReachingVariableUse.java#161#    for (DiGraphEdge<Node, Branch> edge : branchEdges) {
Closure-12.fixed.lines	com/google/javascript/jscomp/MaybeReachingVariableUse.java#162#      if (edge.getValue() == Branch.ON_EX) {
Closure-12.fixed.lines	com/google/javascript/jscomp/MaybeReachingVariableUse.java#163#        return true;
Closure-12.fixed.lines	com/google/javascript/jscomp/MaybeReachingVariableUse.java#164#      }
Closure-12.fixed.lines	com/google/javascript/jscomp/MaybeReachingVariableUse.java#165#    }
Closure-62.fixed.lines	com/google/javascript/jscomp/LightweightMessageFormatter.java#98#          && 0 <= charno && charno <= sourceExcerpt.length()) {
Closure-77.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#966#        case '\0': sb.append("\\0"); break;
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#157#      Set<String> validProperties = Sets.newHashSet();
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#182#          String propName = parent.getLastChild().getString();
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#183#          if (!validProperties.contains(propName)) {
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#184#            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#185#              validProperties.add(propName);
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#186#            } else {
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#187#              return false;
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#188#            }
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#189#          }
Closure-29.fixed.lines	com/google/javascript/jscomp/InlineObjectLiterals.java#225#          validProperties.add(child.getString());
Closure-59.fixed.lines	com/google/javascript/jscomp/Compiler.java#255#    if (options.checkGlobalThisLevel.isOn() &&
Closure-59.fixed.lines	com/google/javascript/jscomp/Compiler.java#256#        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {
Closure-124.fixed.lines	com/google/javascript/jscomp/ExploitAssigns.java#213#    while (node.isGetProp()) {
Closure-124.fixed.lines	com/google/javascript/jscomp/ExploitAssigns.java#215#    }
Closure-45.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#732#          boolean maybeEscaped = false;
Closure-45.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#740#            if (assign.maybeAliased) {
Closure-45.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#741#              maybeEscaped = true;
Closure-45.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#742#            }
Closure-45.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#745#          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {
Closure-45.fixed.lines	com/google/javascript/jscomp/RemoveUnusedVars.java#908#      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);
Closure-35.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1121#    if (constraintObj != null) {
Closure-35.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1122#      type.matchConstraint(constraintObj);
Closure-96.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1409#           (parameters.hasNext() ||
Closure-96.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1410#            parameter != null && parameter.isVarArgs())) {
Closure-96.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1413#      if (parameters.hasNext()) {
Closure-96.fixed.lines	com/google/javascript/jscomp/TypeCheck.java#1415#      }
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#697#    boolean hasSideEffects = false;  // empty function case
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#698#    if (block.hasChildren()) {
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#699#      Preconditions.checkState(block.hasOneChild());
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#700#      Node stmt = block.getFirstChild();
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#701#      if (stmt.isReturn()) {
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#702#        hasSideEffects = NodeUtil.mayHaveSideEffects(
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#703#            stmt.getFirstChild(), compiler);
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#704#      }
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#705#    }
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#732#          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#733#            return CanInlineResult.NO;
Closure-116.fixed.lines	com/google/javascript/jscomp/FunctionInjector.java#734#          }
Closure-121.fixed.lines	com/google/javascript/jscomp/InlineVariables.java#304#          referenceInfo.isAssignedOnceInLifetime() &&
Closure-121.fixed.lines	com/google/javascript/jscomp/InlineVariables.java#308#          (isInlineableDeclaredConstant(v, referenceInfo) ||
Closure-121.fixed.lines	com/google/javascript/jscomp/InlineVariables.java#309#           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {
Closure-72.fixed.lines	com/google/javascript/jscomp/FunctionToBlockMutator.java#152#    new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)
Closure-72.fixed.lines	com/google/javascript/jscomp/FunctionToBlockMutator.java#153#        .process(null, fnNode);
Closure-72.fixed.lines	com/google/javascript/jscomp/RenameLabels.java#215#      if (li.referenced || !removeUnused) {
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#155#      if (c.canInline(t.getScope())) {
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#280#    private boolean canInline(final Scope scope) {
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#375#                  case Token.NAME:
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#376#                    Var var = scope.getOwnSlot(input.getString());
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#377#                    if (var != null
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#378#                        && var.getParentNode().isCatch()) {
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#379#                      return true;
Closure-3.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#380#                    }
Closure-113.fixed.lines	com/google/javascript/jscomp/ProcessClosurePrimitives.java#329#      if (provided != null || requiresLevel.isOn()) {
Closure-93.fixed.lines	com/google/javascript/jscomp/ProcessClosurePrimitives.java#789#          int indexOfDot = namespace.lastIndexOf('.');
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#71#    private boolean unknownDependencies = false;
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#397#        if (n.isName()) {
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#399#          if (dep == null) {
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#400#            def.unknownDependencies = true;
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#401#          } else {
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#403#          }
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#435#    if (def.unknownDependencies) {
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#436#      return true;
Closure-30.fixed.lines	com/google/javascript/jscomp/MustBeReachingVariableDef.java#437#    }
Closure-30.fixed.lines	com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#157#    (new NodeTraversal(compiler, this)).traverseRoots(externs, root);
Closure-40.fixed.lines	com/google/javascript/jscomp/NameAnalyzer.java#635#          JsName name = getName(ns.name, true);
Closure-25.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1036#    scope = traverseChildren(n, scope);
Closure-25.fixed.lines	com/google/javascript/jscomp/TypeInference.java#1055#          backwardsInferenceFromCallSite(n, ct);
Closure-128.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#785#    if (len == 0) {
Closure-128.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#786#      return false;
Closure-128.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#787#    }
Closure-128.fixed.lines	com/google/javascript/jscomp/CodeGenerator.java#794#    return len == 1 || s.charAt(0) != '0';
Closure-55.fixed.lines	com/google/javascript/jscomp/FunctionRewriter.java#117#    return NodeUtil.isFunctionExpression(n)
Closure-55.fixed.lines	com/google/javascript/jscomp/FunctionRewriter.java#118#        && !NodeUtil.isGetOrSetKey(n.getParent());
Closure-106.fixed.lines	com/google/javascript/jscomp/GlobalNamespace.java#907#      Preconditions.checkNotNull(declaration);
Closure-106.fixed.lines	com/google/javascript/jscomp/GlobalNamespace.java#908#      if (declaration.getTwin() != null) {
Closure-106.fixed.lines	com/google/javascript/jscomp/GlobalNamespace.java#909#        return false;
Closure-106.fixed.lines	com/google/javascript/jscomp/GlobalNamespace.java#910#      }
Closure-86.fixed.lines	com/google/javascript/jscomp/NodeUtil.java#2465#        return false;
Closure-67.fixed.lines	com/google/javascript/jscomp/AnalyzePrototypeProperties.java#318#          && assign.getParent().getType() == Token.EXPR_RESULT) {
Closure-17.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1291#              JSDocInfo rValueInfo = rValue.getJSDocInfo();
Closure-17.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1292#              if (rValueInfo != null && rValueInfo.hasType()) {
Closure-17.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1294#                return rValueInfo.getType().evaluate(scope, typeRegistry);
Closure-17.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1295#              } else if (rValue.getJSType() != null
Closure-17.fixed.lines	com/google/javascript/jscomp/TypedScopeCreator.java#1296#                  && !rValue.getJSType().isUnknownType()) {
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#122#          nameStack.push(renamer);
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#123#        }
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#124#        break;
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#126#      case Token.LP: {
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#127#          Renamer renamer = nameStack.peek().forChildScope();
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#130#          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#131#            String name = c.getString();
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#132#            renamer.addDeclaredName(name);
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#133#          }
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#136#          Node functionBody = n.getNext();
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#137#          findDeclaredNames(functionBody, null, renamer);
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#176#        nameStack.pop();
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#181#      case Token.LP:
Closure-49.fixed.lines	com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#185#        break;
Closure-39.fixed.lines	com/google/javascript/rhino/jstype/PrototypeObjectType.java#380#        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
Closure-39.fixed.lines	com/google/javascript/rhino/jstype/PrototypeObjectType.java#383#        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
Closure-39.fixed.lines	com/google/javascript/rhino/jstype/PrototypeObjectType.java#394#      return forAnnotations ? "?" : "{...}";
Chart-8.fixed.lines	org/jfree/data/time/Week.java#175#        this(time, zone, Locale.getDefault());
Chart-13.fixed.lines	org/jfree/chart/block/BorderArrangement.java#455#                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#157#        else {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#189#        }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#743#        this.minimumRangeValueRow = -1;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#744#        this.minimumRangeValueColumn = -1;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#746#        this.maximumRangeValueRow = -1;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#747#        this.maximumRangeValueColumn = -1;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#748#        int rowCount = getRowCount();
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#749#        int columnCount = getColumnCount();
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#750#        for (int r = 0; r < rowCount; r++) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#751#            for (int c = 0; c < columnCount; c++) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#752#                BoxAndWhiskerItem item = getItem(r, c);
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#753#                if (item != null) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#754#                    Number min = item.getMinOutlier();
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#755#                    if (min != null) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#756#                        double minv = min.doubleValue();
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#757#                        if (!Double.isNaN(minv)) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#758#                            if (minv < this.minimumRangeValue || Double.isNaN(
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#759#                                    this.minimumRangeValue)) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#760#                                this.minimumRangeValue = minv;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#761#                                this.minimumRangeValueRow = r;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#762#                                this.minimumRangeValueColumn = c;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#763#                            }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#764#                        }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#765#                    }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#766#                    Number max = item.getMaxOutlier();
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#767#                    if (max != null) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#768#                        double maxv = max.doubleValue();
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#769#                        if (!Double.isNaN(maxv)) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#770#                            if (maxv > this.maximumRangeValue || Double.isNaN(
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#771#                                    this.maximumRangeValue)) {
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#772#                                this.maximumRangeValue = maxv;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#773#                                this.maximumRangeValueRow = r;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#774#                                this.maximumRangeValueColumn = c;
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#775#                            }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#776#                        }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#777#                    }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#778#                }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#779#            }
Chart-21.fixed.lines	org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#780#        }
Chart-1.fixed.lines	org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java#1797#        if (dataset == null) {
Chart-4.fixed.lines	org/jfree/chart/plot/XYPlot.java#4493#                if (r != null) {
Chart-4.fixed.lines	org/jfree/chart/plot/XYPlot.java#4502#                }
Chart-16.fixed.lines	org/jfree/data/category/DefaultIntervalCategoryDataset.java#207#                this.seriesKeys = new Comparable[0];
Chart-16.fixed.lines	org/jfree/data/category/DefaultIntervalCategoryDataset.java#208#                this.categoryKeys = new Comparable[0];
Chart-16.fixed.lines	org/jfree/data/category/DefaultIntervalCategoryDataset.java#338#        if (categoryKeys.length != getCategoryCount()) {
Chart-24.fixed.lines	org/jfree/chart/renderer/GrayPaintScale.java#126#        int g = (int) ((v - this.lowerBound) / (this.upperBound 
Chart-15.fixed.lines	org/jfree/chart/plot/PiePlot.java#1378#        if (this.dataset == null) {
Chart-15.fixed.lines	org/jfree/chart/plot/PiePlot.java#1379#            return 0.0;
Chart-15.fixed.lines	org/jfree/chart/plot/PiePlot.java#1380#        }
Chart-15.fixed.lines	org/jfree/chart/plot/PiePlot.java#2054#        if (this.dataset != null) {
Chart-15.fixed.lines	org/jfree/chart/plot/PiePlot.java#2057#        }
Chart-7.fixed.lines	org/jfree/data/time/TimePeriodValues.java#300#            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()
Chart-7.fixed.lines	org/jfree/data/time/TimePeriodValues.java#302#            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()
Chart-19.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#698#        if (axis == null) {
Chart-19.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#699#            throw new IllegalArgumentException("Null 'axis' argument.");
Chart-19.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#700#        }
Chart-19.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#976#        if (axis == null) {
Chart-19.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#977#            throw new IllegalArgumentException("Null 'axis' argument.");
Chart-19.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#978#        }
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#755#                    double value = intervalXYData.getXValue(series, item);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#758#                    if (!Double.isNaN(value)) {
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#759#                        minimum = Math.min(minimum, value);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#760#                        maximum = Math.max(maximum, value);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#761#                    }
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#764#                        maximum = Math.max(maximum, lvalue);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#767#                        minimum = Math.min(minimum, uvalue);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1249#                    double value = ixyd.getYValue(series, item);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1252#                    if (!Double.isNaN(value)) {
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1253#                        minimum = Math.min(minimum, value);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1254#                        maximum = Math.max(maximum, value);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1255#                    }
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1258#                        maximum = Math.max(maximum, lvalue);
Chart-2.fixed.lines	org/jfree/data/general/DatasetUtilities.java#1261#                        minimum = Math.min(minimum, uvalue);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#232#        int index = rowData.getIndex(columnKey);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#233#        if (index >= 0) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#234#            return rowData.getObject(index);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#319#        allNull = true;
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#321#        for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#322#             item++) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#323#            row = (KeyedObjects) this.rows.get(item);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#324#            int columnIndex = row.getIndex(columnKey);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#325#            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#326#                allNull = false;
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#327#                break;
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#328#            }
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#329#        }
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#331#        if (allNull) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#332#            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#333#                 item++) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#334#                row = (KeyedObjects) this.rows.get(item);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#335#                int columnIndex = row.getIndex(columnKey);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#336#                if (columnIndex >= 0) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#337#                    row.removeValue(columnIndex);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#338#                }
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#339#            }
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#340#            this.columnKeys.remove(columnKey);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#341#        }
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#367#        if (index < 0) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#368#            throw new UnknownKeyException("Row key (" + rowKey 
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#369#                    + ") not recognised.");
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#370#        }
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#404#            int i = rowData.getIndex(columnKey);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#405#            if (i >= 0) {
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#406#                rowData.removeValue(i);
Chart-22.fixed.lines	org/jfree/data/KeyedObjects2D.java#407#            }
Chart-10.fixed.lines	org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java#65#        return " title=\"" + ImageMapUtilities.htmlEscape(toolTipText) 
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#259#        if (meanValue == null) {
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#260#            return;
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#261#        }
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#318#        Number n = dataset.getStdDevValue(row, column);
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#319#        if (n != null) {
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#320#            double valueDelta = n.doubleValue();
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#349#        }
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#409#        if (meanValue == null) {
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#410#            return;
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#411#        }
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#468#        Number n = dataset.getStdDevValue(row, column);
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#469#        if (n != null) {
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#470#            double valueDelta = n.doubleValue();
Chart-25.fixed.lines	org/jfree/chart/renderer/category/StatisticalBarRenderer.java#498#        }
Chart-17.fixed.lines	org/jfree/data/time/TimeSeries.java#857#        TimeSeries clone = (TimeSeries) super.clone();
Chart-17.fixed.lines	org/jfree/data/time/TimeSeries.java#858#        clone.data = (List) ObjectUtilities.deepClone(this.data);
Chart-5.fixed.lines	org/jfree/data/xy/XYSeries.java#544#        if (this.allowDuplicateXValues) {
Chart-5.fixed.lines	org/jfree/data/xy/XYSeries.java#545#            add(x, y);
Chart-5.fixed.lines	org/jfree/data/xy/XYSeries.java#546#            return null;
Chart-5.fixed.lines	org/jfree/data/xy/XYSeries.java#547#        }
Chart-5.fixed.lines	org/jfree/data/xy/XYSeries.java#552#        if (index >= 0) {
Chart-20.fixed.lines	org/jfree/chart/plot/ValueMarker.java#95#        super(paint, stroke, outlinePaint, outlineStroke, alpha);
Chart-9.fixed.lines	org/jfree/data/time/TimeSeries.java#944#        if ((endIndex < 0)  || (endIndex < startIndex)) {
Chart-12.fixed.lines	org/jfree/chart/plot/MultiplePiePlot.java#145#        setDataset(dataset);
Chart-11.fixed.lines	org/jfree/chart/util/ShapeUtilities.java#275#        PathIterator iterator2 = p2.getPathIterator(null);
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#435#    public boolean equals(Object obj) {
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#436#        if (obj == this) {
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#437#            return true;
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#438#        }
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#439#        if (!(obj instanceof MinMaxCategoryRenderer)) {
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#440#            return false;
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#441#        }
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#442#        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#443#        if (this.plotLines != that.plotLines) {
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#444#            return false;
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#445#        }
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#446#        if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#447#            return false;
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#448#        }
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#449#        if (!this.groupStroke.equals(that.groupStroke)) {
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#450#            return false;
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#451#        }
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#452#        return super.equals(obj);
Chart-23.fixed.lines	org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java#453#    }
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues.java#333#            throw new UnknownKeyException("The key (" + key 
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues.java#334#                    + ") is not recognised.");
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#455#    	if (columnKey == null) {
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#456#    		throw new IllegalArgumentException("Null 'columnKey' argument.");
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#457#    	}
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#458#    	if (!this.columnKeys.contains(columnKey)) {
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#459#    		throw new UnknownKeyException("Unknown key: " + columnKey);
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#460#    	}
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#464#            int index = rowData.getIndex(columnKey);
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#465#            if (index >= 0) {
Chart-18.fixed.lines	org/jfree/data/DefaultKeyedValues2D.java#467#            }
Chart-3.fixed.lines	org/jfree/data/time/TimeSeries.java#1057#        copy.minY = Double.NaN;
Chart-3.fixed.lines	org/jfree/data/time/TimeSeries.java#1058#        copy.maxY = Double.NaN;
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#111#        ShapeList that = (ShapeList) obj;
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#112#        int listSize = size();
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#113#        for (int i = 0; i < listSize; i++) {
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#114#           if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) {
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#115#               return false;
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#116#           }
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#117#        }
Chart-6.fixed.lines	org/jfree/chart/util/ShapeList.java#118#        return true;
Chart-14.fixed.lines	org/jfree/chart/plot/XYPlot.java#2293#        if (markers == null) {
Chart-14.fixed.lines	org/jfree/chart/plot/XYPlot.java#2294#            return false;
Chart-14.fixed.lines	org/jfree/chart/plot/XYPlot.java#2295#        }
Chart-14.fixed.lines	org/jfree/chart/plot/XYPlot.java#2531#        }
Chart-14.fixed.lines	org/jfree/chart/plot/XYPlot.java#2532#        if (markers == null) {
Chart-14.fixed.lines	org/jfree/chart/plot/XYPlot.java#2533#            return false;
Chart-14.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#2166#        if (markers == null) {
Chart-14.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#2167#            return false;
Chart-14.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#2168#        }
Chart-14.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#2450#        }
Chart-14.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#2451#        if (markers == null) {
Chart-14.fixed.lines	org/jfree/chart/plot/CategoryPlot.java#2452#            return false;
Chart-26.fixed.lines	org/jfree/chart/axis/Axis.java#1192#            if (owner != null) {
Chart-26.fixed.lines	org/jfree/chart/axis/Axis.java#1198#            }
Math-82.fixed.lines	org/apache/commons/math/optimization/linear/SimplexSolver.java#82#            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
Math-100.fixed.lines	org/apache/commons/math/estimation/AbstractEstimator.java#166#        final int cols = problem.getUnboundParameters().length;
Math-100.fixed.lines	org/apache/commons/math/estimation/AbstractEstimator.java#202#        int p = problem.getUnboundParameters().length;
Math-100.fixed.lines	org/apache/commons/math/estimation/AbstractEstimator.java#207#        double[] errors = new double[problem.getUnboundParameters().length];
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#185#                case REGULA_FALSI:
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#186#                    if (x == x1) {
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#187#                        final double delta = FastMath.max(rtol * FastMath.abs(x1),
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#188#                                                          atol);
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#191#                        x0 = 0.5 * (x0 + x1 - delta);
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#192#                        f0 = computeObjectiveValue(x0);
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#193#                    }
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#194#                    break;
Math-51.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#197#                    throw new MathInternalError();
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#78#            int swapR = r;
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#81#                int isr = index[swapR];
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#82#                if (c[ii][ii] > c[isr][isr]) {
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#83#                    swapR = i;
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#89#            if (swapR != r) {
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#90#                final int tmpIndex    = index[r];
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#91#                index[r]              = index[swapR];
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#92#                index[swapR]          = tmpIndex;
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#93#                final double[] tmpRow = b[r];
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#94#                b[r]                  = b[swapR];
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#95#                b[swapR]              = tmpRow;
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#126#                final double inverse2 = 1 / c[ir][ir];
Math-21.fixed.lines	org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#131#                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#562#        if (m instanceof DiagonalMatrix) {
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#563#            final int dim = m.getRowDimension();
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#564#            final RealMatrix sqrtM = new DiagonalMatrix(dim);
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#565#            for (int i = 0; i < dim; i++) {
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#566#               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#567#            }
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#568#            return sqrtM;
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#569#        } else {
Math-13.fixed.lines	org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#572#        }
Math-63.fixed.lines	org/apache/commons/math/util/MathUtils.java#417#        return equals(x, y, 1);
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#162#                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#166#                for (int i = 0; i < p; ++i) {
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#171#                    if (i < n - 1) {
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#177#                    } else {
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#179#                            wi[j] = mi * ei0[j] / singularValues[j];
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#181#                    }
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#182#                }
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#251#                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#255#                for (int i = 0; i < p; ++i) {
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#259#                    if (i < m - 1) {
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#265#                    } else {
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#267#                            wi[j] = mi * ei0[j] / singularValues[j];
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#269#                    }
Math-76.fixed.lines	org/apache/commons/math/linear/SingularValueDecompositionImpl.java#270#                }
Math-28.fixed.lines	org/apache/commons/math3/optimization/linear/SimplexSolver.java#119#            if (tableau.getNumArtificialVariables() > 0) {
Math-28.fixed.lines	org/apache/commons/math3/optimization/linear/SimplexSolver.java#129#            }
Math-28.fixed.lines	org/apache/commons/math3/optimization/linear/SimplexSolver.java#140#            if (getIterations() < getMaxIterations() / 2) {
Math-28.fixed.lines	org/apache/commons/math3/optimization/linear/SimplexSolver.java#155#            }
Math-58.fixed.lines	org/apache/commons/math/optimization/fitting/GaussianFitter.java#121#        return fit(guess);
Math-44.fixed.lines	org/apache/commons/math/ode/AbstractIntegrator.java#333#                    for (final EventState remaining : occuringEvents) {
Math-44.fixed.lines	org/apache/commons/math/ode/AbstractIntegrator.java#334#                        remaining.stepAccepted(eventT, eventY);
Math-44.fixed.lines	org/apache/commons/math/ode/AbstractIntegrator.java#335#                    }
Math-44.fixed.lines	org/apache/commons/math/ode/AbstractIntegrator.java#345#                    for (final EventState remaining : occuringEvents) {
Math-44.fixed.lines	org/apache/commons/math/ode/AbstractIntegrator.java#346#                        remaining.stepAccepted(eventT, eventY);
Math-44.fixed.lines	org/apache/commons/math/ode/AbstractIntegrator.java#347#                    }
Math-34.fixed.lines	org/apache/commons/math3/genetics/ListPopulation.java#209#        return getChromosomes().iterator();
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#138#        if (sign > 0) {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#140#            if (Math.abs(yMin) <= functionValueAccuracy) {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#141#                setResult(min, 0);
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#142#                ret = min;
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#143#            } else if (Math.abs(yMax) <= functionValueAccuracy) {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#144#                setResult(max, 0);
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#145#                ret = max;
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#146#            } else {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#152#            }
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#153#        } else if (sign < 0){
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#156#        } else {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#158#            if (yMin == 0.0) {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#159#                ret = min;
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#160#            } else {
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#161#                ret = max;
Math-97.fixed.lines	org/apache/commons/math/analysis/BrentSolver.java#162#            }
Math-9.fixed.lines	org/apache/commons/math3/geometry/euclidean/threed/Line.java#87#        final Line reverted = new Line(this);
Math-9.fixed.lines	org/apache/commons/math3/geometry/euclidean/threed/Line.java#88#        reverted.direction = reverted.direction.negate();
Math-73.fixed.lines	org/apache/commons/math/analysis/solvers/BrentSolver.java#136#        if (yMin * yMax > 0) {
Math-73.fixed.lines	org/apache/commons/math/analysis/solvers/BrentSolver.java#137#            throw MathRuntimeException.createIllegalArgumentException(
Math-73.fixed.lines	org/apache/commons/math/analysis/solvers/BrentSolver.java#138#                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
Math-73.fixed.lines	org/apache/commons/math/analysis/solvers/BrentSolver.java#139#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#185#        if (k > n / 2)
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#186#            return binomialCoefficient(n, n - k);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#193#        long result = 1;
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#194#        if (n <= 61) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#196#            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#197#                result = result * i / j;
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#198#            }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#199#        } else if (n <= 66) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#202#            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#209#                long d = gcd(i, j);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#210#                result = (result / (j / d)) * (i / d);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#211#            }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#212#        } else {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#216#            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#217#                long d = gcd(i, j);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#218#                result = mulAndCheck((result / (j / d)), (i / d));
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#219#            }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#220#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#247#        if (n < k) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#248#            throw new IllegalArgumentException(
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#249#                "must have n >= k for binomial coefficient (n,k)");
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#250#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#251#        if (n < 0) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#252#            throw new IllegalArgumentException(
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#253#                "must have n >= 0 for binomial coefficient (n,k)");
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#254#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#255#        if ((n == k) || (k == 0)) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#256#            return 1d;
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#257#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#258#        if ((k == 1) || (k == n - 1)) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#259#            return n;
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#260#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#261#        if (k > n/2) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#262#            return binomialCoefficientDouble(n, n - k);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#263#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#264#        if (n < 67) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#265#            return binomialCoefficient(n,k);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#266#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#268#        double result = 1d;
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#269#        for (int i = 1; i <= k; i++) {
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#270#             result *= (double)(n - k + i) / (double)i;
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#271#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#273#        return Math.floor(result + 0.5);
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#314#        if (n < 67) {  
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#315#            return Math.log(binomialCoefficient(n,k));
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#316#        }
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#322#        if (n < 1030) { 
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#323#            return Math.log(binomialCoefficientDouble(n, k));
Math-92.fixed.lines	org/apache/commons/math/util/MathUtils.java#324#        } 
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#141#            double dN = a + b * dPrev;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#142#            if (Precision.equals(dN, 0.0, small)) {
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#143#                dN = small;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#144#            }
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#145#            double cN = a + b / cPrev;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#146#            if (Precision.equals(cN, 0.0, small)) {
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#147#                cN = small;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#150#            dN = 1 / dN;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#151#            final double deltaN = cN * dN;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#152#            hN = hPrev * deltaN;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#167#            dPrev = dN;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#168#            cPrev = cN;
Math-31.fixed.lines	org/apache/commons/math3/util/ContinuedFraction.java#169#            hPrev = hN;
Math-41.fixed.lines	org/apache/commons/math/stat/descriptive/moment/Variance.java#520#                for (int i = begin; i < begin + length; i++) {
Math-24.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#230#                        return best(current, previous, isMinim);
Math-24.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#267#                return best(current, previous, isMinim);
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#273#                if ((bits & 0x8000000000000000L) != 0) {
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#274#                    sign = -1;
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#275#                }
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#2322#        int cmp0 = compare(this, getZero());
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#2323#        if (cmp0 == 0) {
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#2324#            return sign < 0 ? -0.0 : +0.0;
Math-54.fixed.lines	org/apache/commons/math/dfp/Dfp.java#2325#        } else if (cmp0 < 0) {
Math-105.fixed.lines	org/apache/commons/math/stat/regression/SimpleRegression.java#264#        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);
Math-87.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#275#            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
Math-87.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#277#            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
Math-5.fixed.lines	org/apache/commons/math3/complex/Complex.java#305#            return INF;
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#44#        setMaxEvaluations(1000);
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#46#        setAbsoluteAccuracy(1e-11);
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#47#        setRelativeAccuracy(1e-9);
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#58#                        getMin(), getStartValue(), getMax(),
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#110#        double fx = computeObjectiveValue(x);
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#111#        if (!isMinim) {
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#117#        while (true) {
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#190#                double fu = computeObjectiveValue(u);
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#191#                if (!isMinim) {
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#228#                setFunctionValue(isMinim ? fx : -fx);
Math-66.fixed.lines	org/apache/commons/math/optimization/univariate/BrentOptimizer.java#231#            incrementIterationsCounter();
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#82#    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#395#          if (x >= LOG_MAX_VALUE) {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#397#              final double t = exp(0.5 * x);
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#398#              return (0.5 * t) * t;
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#399#          } else {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#402#      } else if (x < -20) {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#403#          if (x <= -LOG_MAX_VALUE) {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#405#              final double t = exp(-0.5 * x);
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#406#              return (0.5 * t) * t;
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#407#          } else {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#409#          }
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#465#          if (x >= LOG_MAX_VALUE) {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#467#              final double t = exp(0.5 * x);
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#468#              return (0.5 * t) * t;
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#469#          } else {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#472#      } else if (x < -20) {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#473#          if (x <= -LOG_MAX_VALUE) {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#475#              final double t = exp(-0.5 * x);
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#476#              return (-0.5 * t) * t;
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#477#          } else {
Math-16.fixed.lines	org/apache/commons/math3/util/FastMath.java#479#          }
Math-48.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#189#                    if (x == x1) {
Math-48.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#190#                        throw new ConvergenceException();
Math-48.fixed.lines	org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#191#                    }
Math-38.fixed.lines	org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1660#//                     throw new PathIsExploredException(); // XXX
Math-38.fixed.lines	org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1662#                final int iptMinus1 = ipt - 1;
Math-38.fixed.lines	org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1663#                final int jptMinus1 = jpt - 1;
Math-38.fixed.lines	org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1752#//                 throw new PathIsExploredException(); // XXX
Math-65.fixed.lines	org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#240#        return Math.sqrt(getChiSquare() / rows);
Math-65.fixed.lines	org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#253#            chiSquare += residual * residual * residualsWeights[i];
Math-98.fixed.lines	org/apache/commons/math/linear/BigMatrixImpl.java#991#        final BigDecimal[] out = new BigDecimal[nRows];
Math-98.fixed.lines	org/apache/commons/math/linear/RealMatrixImpl.java#779#        final double[] out = new double[nRows];
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java#192#            incrementIterationCount();
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java#226#                    stop = checker.converged(getIterations(), previous, current);
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#216#            incrementIterationCount();
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#222#                if (checker.converged(getIterations(), previous, current)) {
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#276#            if (getIterations() % n == 0 ||
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java#158#            if (getIterations() > 0) {
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java#175#            incrementIterationCount();
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java#107#            incrementIterationCount();
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java#159#                converged = checker.converged(getIterations(), previous, current);
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java#388#            incrementIterationCount();
Math-6.fixed.lines	org/apache/commons/math3/optim/BaseOptimizer.java#51#        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java#324#            incrementIterationCount();
Math-6.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java#489#                        if (checker.converged(getIterations(), previous, current)) {
Math-15.fixed.lines	org/apache/commons/math3/util/FastMath.java#313#    private static final double TWO_POWER_53 = 2 * TWO_POWER_52;
Math-15.fixed.lines	org/apache/commons/math3/util/FastMath.java#1542#            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#165#        if (num.intValue() < 0) {
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#167#            pos.setIndex(initialIndex);
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#168#            return null;
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#169#        }
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#204#        if (den.intValue() < 0) {
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#206#            pos.setIndex(initialIndex);
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#207#            return null;
Math-106.fixed.lines	org/apache/commons/math/fraction/ProperFractionFormat.java#208#        }
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#64#        final RealConvergenceChecker checker = getConvergenceChecker();
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#93#                return;
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#94#            }
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#97#            final int iter = getIterations();
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#98#            boolean converged = true;
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#99#            for (int i = 0; i < simplex.length; ++i) {
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#100#                converged &= checker.converged(iter, original[i], simplex[i]);
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#101#            }
Math-84.fixed.lines	org/apache/commons/math/optimization/direct/MultiDirectional.java#102#            if (converged) {
Math-79.fixed.lines	org/apache/commons/math/util/MathUtils.java#1624#      double sum = 0;
Math-79.fixed.lines	org/apache/commons/math/util/MathUtils.java#1626#          final double dp = p1[i] - p2[i];
Math-27.fixed.lines	org/apache/commons/math3/fraction/Fraction.java#597#        return 100 * doubleValue();
Math-57.fixed.lines	org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java#175#            double sum = 0;
Math-32.fixed.lines	org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java#136#            if (tree.getCut() == null && (Boolean) tree.getAttribute()) {
Math-42.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#410#          if (basicRow != null && basicRow == 0) {
Math-42.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#414#              coefficients[i] = 0;
Math-42.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#415#          } else if (basicRows.contains(basicRow)) {
Math-91.fixed.lines	org/apache/commons/math/fraction/Fraction.java#259#        long nOd = ((long) numerator) * object.denominator;
Math-91.fixed.lines	org/apache/commons/math/fraction/Fraction.java#260#        long dOn = ((long) denominator) * object.numerator;
Math-70.fixed.lines	org/apache/commons/math/analysis/solvers/BisectionSolver.java#72#        return solve(f, min, max);
Math-69.fixed.lines	org/apache/commons/math/stat/correlation/PearsonsCorrelation.java#171#                    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);
Math-94.fixed.lines	org/apache/commons/math/util/MathUtils.java#412#        if ((u == 0) || (v == 0)) {
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#540#                for (int i = 0; i < lB.length; i++) {
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#541#                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#542#                        final double max = Double.MAX_VALUE + boundaries[0][i];
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#543#                        final NumberIsTooLargeException e
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#544#                            = new NumberIsTooLargeException(boundaries[1][i],
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#545#                                                            max,
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#546#                                                            true);
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#547#                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#548#                        e.getContext().addMessage(LocalizedFormats.INDEX, i);
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#550#                        throw e;
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#551#                    }
Math-19.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#552#                }
Math-47.fixed.lines	org/apache/commons/math/complex/Complex.java#82#    private final transient boolean isZero;
Math-47.fixed.lines	org/apache/commons/math/complex/Complex.java#106#        isZero = real == 0 && imaginary == 0;
Math-47.fixed.lines	org/apache/commons/math/complex/Complex.java#258#        if (divisor.isZero) {
Math-47.fixed.lines	org/apache/commons/math/complex/Complex.java#259#            return isZero ? NaN : INF;
Math-47.fixed.lines	org/apache/commons/math/complex/Complex.java#295#            return isZero ? NaN : INF;
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1018#        if (isNaN || Double.isInfinite(real)) {
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1021#        if (imaginary > 20.0) {
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1022#            return createComplex(0.0, 1.0);
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1023#        }
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1024#        if (imaginary < -20.0) {
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1025#            return createComplex(0.0, -1.0);
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1026#        }
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1069#        if (isNaN || Double.isInfinite(imaginary)) {
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1071#        }
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1072#        if (real > 20.0) {
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1073#            return createComplex(1.0, 0.0);
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1074#        }
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1075#        if (real < -20.0) {
Math-37.fixed.lines	org/apache/commons/math/complex/Complex.java#1076#            return createComplex(-1.0, 0.0);
Math-88.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#329#        Set<Integer> basicRows = new HashSet<Integer>();
Math-88.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#332#            if (basicRows.contains(basicRow)) {
Math-88.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#335#                coefficients[i] = 0;
Math-88.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#336#            } else {
Math-88.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#337#                basicRows.add(basicRow);
Math-75.fixed.lines	org/apache/commons/math/stat/Frequency.java#303#        return getPct((Comparable<?>) v);
Math-10.fixed.lines	org/apache/commons/math3/analysis/differentiation/DSCompiler.java#1419#        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
Math-3.fixed.lines	org/apache/commons/math3/util/MathArrays.java#821#        if (len == 1) {
Math-3.fixed.lines	org/apache/commons/math3/util/MathArrays.java#823#            return a[0] * b[0];
Math-3.fixed.lines	org/apache/commons/math3/util/MathArrays.java#824#        }
Math-60.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#126#        if (FastMath.abs(dev) > 40 * standardDeviation) { 
Math-60.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#127#            return dev < 0 ? 0.0d : 1.0d;
Math-60.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#128#        }
Math-52.fixed.lines	org/apache/commons/math/geometry/euclidean/threed/Rotation.java#344#  final double inPlaneThreshold = 0.001;
Math-52.fixed.lines	org/apache/commons/math/geometry/euclidean/threed/Rotation.java#345#  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
Math-52.fixed.lines	org/apache/commons/math/geometry/euclidean/threed/Rotation.java#354#    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
Math-52.fixed.lines	org/apache/commons/math/geometry/euclidean/threed/Rotation.java#360#      if (c <= 0) {
Math-22.fixed.lines	org/apache/commons/math3/distribution/UniformRealDistribution.java#184#        return true;
Math-22.fixed.lines	org/apache/commons/math3/distribution/FDistribution.java#275#        return false;
Math-81.fixed.lines	org/apache/commons/math/linear/EigenDecompositionImpl.java#603#        upperSpectra = Math.max(upperSpectra, upper);
Math-81.fixed.lines	org/apache/commons/math/linear/EigenDecompositionImpl.java#906#                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {
Math-81.fixed.lines	org/apache/commons/math/linear/EigenDecompositionImpl.java#907#                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||
Math-81.fixed.lines	org/apache/commons/math/linear/EigenDecompositionImpl.java#1544#                if (end - start > 3) {
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#109#        try {
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#112#        } catch (MaxIterationsExceededException ex) {
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#113#            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#114#                return 0.0d;
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#115#            } else if (x > (mean + 20 * standardDeviation)) {
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#116#                return 1.0d;
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#117#            } else {
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#118#                throw ex;
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#119#            }
Math-103.fixed.lines	org/apache/commons/math/distribution/NormalDistributionImpl.java#120#        }
Math-17.fixed.lines	org/apache/commons/math3/dfp/Dfp.java#1603#        if (x >= 0 && x < RADIX) {
Math-17.fixed.lines	org/apache/commons/math3/dfp/Dfp.java#1605#        } else {
Math-17.fixed.lines	org/apache/commons/math3/dfp/Dfp.java#1606#            return multiply(newInstance(x));
Math-17.fixed.lines	org/apache/commons/math3/dfp/Dfp.java#1607#        }
Math-67.fixed.lines	org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java#92#        return optimaValues[0];
Math-67.fixed.lines	org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java#97#        return optima[0];
Math-4.fixed.lines	org/apache/commons/math3/geometry/euclidean/threed/SubLine.java#114#        if (v1D == null) {
Math-4.fixed.lines	org/apache/commons/math3/geometry/euclidean/threed/SubLine.java#115#            return null;
Math-4.fixed.lines	org/apache/commons/math3/geometry/euclidean/threed/SubLine.java#116#        }
Math-4.fixed.lines	org/apache/commons/math3/geometry/euclidean/twod/SubLine.java#118#        if (v2D == null) {
Math-4.fixed.lines	org/apache/commons/math3/geometry/euclidean/twod/SubLine.java#119#            return null;
Math-4.fixed.lines	org/apache/commons/math3/geometry/euclidean/twod/SubLine.java#120#        }
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#250#        if (forward) {
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#251#            if (stepStart + stepSize >= t) {
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#252#                stepSize = t - stepStart;
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#253#            }
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#254#        } else {
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#255#            if (stepStart + stepSize <= t) {
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#256#                stepSize = t - stepStart;
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#257#            }
Math-39.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#258#        }
Math-49.fixed.lines	org/apache/commons/math/linear/OpenMapRealVector.java#345#        Iterator iter = entries.iterator();
Math-49.fixed.lines	org/apache/commons/math/linear/OpenMapRealVector.java#358#        Iterator iter = entries.iterator();
Math-49.fixed.lines	org/apache/commons/math/linear/OpenMapRealVector.java#370#        Iterator iter = entries.iterator();
Math-49.fixed.lines	org/apache/commons/math/linear/OpenMapRealVector.java#383#        Iterator iter = entries.iterator();
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#459#      final double n1 = v1.getNormSq();
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#460#      final double n2 = v2.getNormSq();
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#461#      if ((n1 * n2) < MathUtils.SAFE_MIN) {
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#462#          return ZERO;
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#463#      }
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#467#      final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#468#      final double x1    = FastMath.scalb(v1.x, -deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#469#      final double y1    = FastMath.scalb(v1.y, -deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#470#      final double z1    = FastMath.scalb(v1.z, -deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#471#      final double x2    = FastMath.scalb(v2.x,  deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#472#      final double y2    = FastMath.scalb(v2.y,  deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#473#      final double z2    = FastMath.scalb(v2.z,  deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#482#      final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#483#      final double rho   = FastMath.rint(256 * ratio) / 256;
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#485#      final double x3 = x1 - rho * x2;
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#486#      final double y3 = y1 - rho * y2;
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#487#      final double z3 = z1 - rho * z2;
Math-55.fixed.lines	org/apache/commons/math/geometry/Vector3D.java#490#      return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);
Math-25.fixed.lines	org/apache/commons/math3/optimization/fitting/HarmonicFitter.java#323#                if (c2 == 0) {
Math-25.fixed.lines	org/apache/commons/math3/optimization/fitting/HarmonicFitter.java#326#                    throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);
Math-25.fixed.lines	org/apache/commons/math3/optimization/fitting/HarmonicFitter.java#327#                }
Math-86.fixed.lines	org/apache/commons/math/linear/CholeskyDecompositionImpl.java#134#            if (ltI[i] < absolutePositivityThreshold) {
Math-86.fixed.lines	org/apache/commons/math/linear/CholeskyDecompositionImpl.java#135#                throw new NotPositiveDefiniteMatrixException();
Math-86.fixed.lines	org/apache/commons/math/linear/CholeskyDecompositionImpl.java#136#            }
Math-104.fixed.lines	org/apache/commons/math/special/Gamma.java#37#    private static final double DEFAULT_EPSILON = 10e-15;
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#345#        if (n < 0) {
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#346#            throw new IllegalArgumentException("must have n >= 0 for n!");
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#347#        }
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#348#        if (n > 20) {
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#379#        if (n < 21) {
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#380#            return factorial(n);
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#381#        }
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#401#        }
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#402#        if (n < 21) {
Math-93.fixed.lines	org/apache/commons/math/util/MathUtils.java#403#            return Math.log(factorial(n));
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#235#                final int p = agingA - MAXIMAL_AGING;
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#236#                final double weightA = (1 << p) - 1;
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#237#                final double weightB = p + 1;
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#238#                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#241#                final int p = agingB - MAXIMAL_AGING;
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#242#                final double weightA = p + 1;
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#243#                final double weightB = (1 << p) - 1;
Math-40.fixed.lines	org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#244#                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);
Math-30.fixed.lines	org/apache/commons/math3/stat/inference/MannWhitneyUTest.java#173#        final double n1n2prod = n1 * n2;
Math-72.fixed.lines	org/apache/commons/math/analysis/solvers/BrentSolver.java#115#            setResult(min, 0);
Math-72.fixed.lines	org/apache/commons/math/analysis/solvers/BrentSolver.java#127#            setResult(max, 0);
Math-35.fixed.lines	org/apache/commons/math3/genetics/ElitisticListPopulation.java#51#        setElitismRate(elitismRate);
Math-35.fixed.lines	org/apache/commons/math3/genetics/ElitisticListPopulation.java#65#        setElitismRate(elitismRate);
Math-45.fixed.lines	org/apache/commons/math/linear/OpenMapRealMatrix.java#50#        long lRow = (long) rowDimension;
Math-45.fixed.lines	org/apache/commons/math/linear/OpenMapRealMatrix.java#51#        long lCol = (long) columnDimension;
Math-45.fixed.lines	org/apache/commons/math/linear/OpenMapRealMatrix.java#52#        if (lRow * lCol >= (long) Integer.MAX_VALUE) {
Math-45.fixed.lines	org/apache/commons/math/linear/OpenMapRealMatrix.java#53#            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);
Math-45.fixed.lines	org/apache/commons/math/linear/OpenMapRealMatrix.java#54#        }
Math-8.fixed.lines	org/apache/commons/math3/distribution/DiscreteDistribution.java#181#    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
Math-8.fixed.lines	org/apache/commons/math3/distribution/DiscreteDistribution.java#187#        final Object[] out = new Object[sampleSize];
Math-96.fixed.lines	org/apache/commons/math/complex/Complex.java#258#                    ret = (real == rhs.real) && (imaginary == rhs.imaginary); 
Math-77.fixed.lines	org/apache/commons/math/linear/ArrayRealVector.java#721#            max = Math.max(max, Math.abs(a));
Math-59.fixed.lines	org/apache/commons/math/util/FastMath.java#3482#        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#349#        final int n = getDimension();
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#350#        for (int i = 0; i < n; i++) {
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#351#            res.setEntry(i, this.getEntry(i) / v.getEntry(i));
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#373#        if (v.isNaN() || v.isInfinite()) {
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#374#            final int n = getDimension();
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#375#            for (int i = 0; i < n; i++) {
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#376#                final double y = v.getEntry(i);
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#377#                if (Double.isNaN(y)) {
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#378#                    res.setEntry(i, Double.NaN);
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#379#                } else if (Double.isInfinite(y)) {
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#380#                    final double x = this.getEntry(i);
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#381#                    res.setEntry(i, x * y);
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#382#                }
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#383#            }
Math-29.fixed.lines	org/apache/commons/math3/linear/OpenMapRealVector.java#384#        }
Math-1.fixed.lines	org/apache/commons/math3/fraction/Fraction.java#215#                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
Math-1.fixed.lines	org/apache/commons/math3/fraction/Fraction.java#216#                    break;
Math-1.fixed.lines	org/apache/commons/math3/fraction/Fraction.java#217#                }
Math-1.fixed.lines	org/apache/commons/math3/fraction/BigFraction.java#306#                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
Math-1.fixed.lines	org/apache/commons/math3/fraction/BigFraction.java#307#                    break;
Math-1.fixed.lines	org/apache/commons/math3/fraction/BigFraction.java#308#                }
Math-62.fixed.lines	org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#146#        return optimize(f, goal, min, max, min + 0.5 * (max - min));
Math-62.fixed.lines	org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#160#                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
Math-62.fixed.lines	org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#161#                optima[i] = optimizer.optimize(f, goal, min, max, s);
Math-12.fixed.lines	org/apache/commons/math3/random/BitsStreamGenerator.java#19#import java.io.Serializable;
Math-12.fixed.lines	org/apache/commons/math3/random/BitsStreamGenerator.java#30#    implements RandomGenerator,
Math-12.fixed.lines	org/apache/commons/math3/random/BitsStreamGenerator.java#31#               Serializable {
Math-12.fixed.lines	org/apache/commons/math3/random/BitsStreamGenerator.java#33#    private static final long serialVersionUID = 20130104L;
Math-101.fixed.lines	org/apache/commons/math/complex/ComplexFormat.java#377#        if ((startIndex >= source.length()) ||
Math-101.fixed.lines	org/apache/commons/math/complex/ComplexFormat.java#378#            (endIndex > source.length()) ||
Math-83.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#292#        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;
Math-83.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#341#      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
Math-83.fixed.lines	org/apache/commons/math/optimization/linear/SimplexTableau.java#345#          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
Math-20.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#921#            return boundaries != null && isRepairMode ?
Math-20.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#922#                decode(repair(x)) :
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#151#        UnivariatePointValuePair best = current;
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#235#                best = best(best,
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#236#                            best(current,
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#237#                                 previous,
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#238#                                 isMinim),
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#239#                            isMinim);
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#243#                        return best;
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#280#                return best(best,
Math-23.fixed.lines	org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#283#                                 isMinim),
Math-53.fixed.lines	org/apache/commons/math/complex/Complex.java#153#        if (isNaN || rhs.isNaN) {
Math-53.fixed.lines	org/apache/commons/math/complex/Complex.java#154#            return NaN;
Math-53.fixed.lines	org/apache/commons/math/complex/Complex.java#155#        }
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#74#        double sumExpected = 0d;
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#75#        double sumObserved = 0d;
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#76#        for (int i = 0; i < observed.length; i++) {
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#77#            sumExpected += expected[i];
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#78#            sumObserved += observed[i];
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#79#        }
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#80#        double ratio = 1.0d;
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#81#        boolean rescale = false;
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#82#        if (Math.abs(sumExpected - sumObserved) > 10E-6) {
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#83#            ratio = sumObserved / sumExpected;
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#84#            rescale = true;
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#85#        }
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#89#            if (rescale) {
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#90#                dev = ((double) observed[i] - ratio * expected[i]);
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#91#                sumSq += dev * dev / (ratio * expected[i]);
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#92#            } else {
Math-102.fixed.lines	org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#95#            }
Math-80.fixed.lines	org/apache/commons/math/linear/EigenDecompositionImpl.java#1135#            int j = 4 * (n - 1);
Math-61.fixed.lines	org/apache/commons/math/distribution/PoissonDistributionImpl.java#22#import org.apache.commons.math.exception.NotStrictlyPositiveException;
Math-61.fixed.lines	org/apache/commons/math/distribution/PoissonDistributionImpl.java#94#            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
Math-2.fixed.lines	org/apache/commons/math3/distribution/HypergeometricDistribution.java#268#        return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());
Math-11.fixed.lines	org/apache/commons/math3/distribution/MultivariateNormalDistribution.java#183#        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#245#          final double[] scale = new double[y0.length];
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#247#              for (int i = 0; i < scale.length; ++i) {
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#248#                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#249#              }
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#251#              for (int i = 0; i < scale.length; ++i) {
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#252#                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);
Math-74.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#253#              }
Math-89.fixed.lines	org/apache/commons/math/stat/Frequency.java#110#        if (v instanceof Comparable<?>){
Math-89.fixed.lines	org/apache/commons/math/stat/Frequency.java#112#        } else {
Math-89.fixed.lines	org/apache/commons/math/stat/Frequency.java#113#            throw new IllegalArgumentException("Object must implement Comparable");
Math-89.fixed.lines	org/apache/commons/math/stat/Frequency.java#114#        }
Math-18.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#932#                res[i] = x[i] / diff;
Math-18.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#958#                res[i] = diff * x[i];
Math-18.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#990#            final double[] bLoEnc = encode(boundaries[0]);
Math-18.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#991#            final double[] bHiEnc = encode(boundaries[1]);
Math-18.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#994#                if (x[i] < bLoEnc[i]) {
Math-18.fixed.lines	org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#997#                if (x[i] > bHiEnc[i]) {
Math-95.fixed.lines	org/apache/commons/math/distribution/FDistributionImpl.java#144#        double ret = 1.0;
Math-95.fixed.lines	org/apache/commons/math/distribution/FDistributionImpl.java#146#        if (d > 2.0) {
Math-95.fixed.lines	org/apache/commons/math/distribution/FDistributionImpl.java#149#        }
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#166#        setConvergenceChecker(null);
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#248#        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#254#            VectorialPointValuePair previous = current;
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#306#                return current;
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#348#                current = new VectorialPointValuePair(point, objective);
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#417#                if (checker != null) {
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#419#                    if (checker.converged(getIterations(), previous, current)) {
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#420#                        return current;                        
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#421#                    }
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#422#                } else {
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#428#                        return current;
Math-68.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#430#                }
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#686#        if (Double.isNaN(result)) {
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#689#            int shift = Math.max(numerator.bitLength(),
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#690#                                 denominator.bitLength()) - Double.MAX_EXPONENT;
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#691#            result = numerator.shiftRight(shift).doubleValue() /
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#692#                denominator.shiftRight(shift).doubleValue();
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#693#        }
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#739#        if (Double.isNaN(result)) {
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#742#            int shift = Math.max(numerator.bitLength(),
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#743#                                 denominator.bitLength()) - Float.MAX_EXPONENT;
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#744#            result = numerator.shiftRight(shift).floatValue() /
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#745#                denominator.shiftRight(shift).floatValue();
Math-36.fixed.lines	org/apache/commons/math/fraction/BigFraction.java#746#        }
Math-46.fixed.lines	org/apache/commons/math/complex/Complex.java#260#            return NaN;
Math-46.fixed.lines	org/apache/commons/math/complex/Complex.java#297#            return NaN;
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java#180#                interpolator.storeTime(stepStart);
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java#181#                System.arraycopy(y, 0, yTmp, 0, y0.length);
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java#182#                stepSize = 0;
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#300#                  interpolator.storeTime(stepStart);
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#301#                  System.arraycopy(y, 0, yTmp, 0, y0.length);
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#302#                  hNew     = 0;
Math-71.fixed.lines	org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#303#                  stepSize = 0;
Math-43.fixed.lines	org/apache/commons/math/stat/descriptive/SummaryStatistics.java#158#        if (meanImpl != mean) {
Math-43.fixed.lines	org/apache/commons/math/stat/descriptive/SummaryStatistics.java#161#        if (varianceImpl != variance) {
Math-43.fixed.lines	org/apache/commons/math/stat/descriptive/SummaryStatistics.java#164#        if (geoMeanImpl != geoMean) {
Math-33.fixed.lines	org/apache/commons/math3/optimization/linear/SimplexTableau.java#338#            if (Precision.compareTo(entry, 0d, epsilon) > 0) {
Math-90.fixed.lines	org/apache/commons/math/stat/Frequency.java#110#        addValue((Comparable<?>) v);
Math-90.fixed.lines	org/apache/commons/math/stat/Frequency.java#111#    }
Math-90.fixed.lines	org/apache/commons/math/stat/Frequency.java#123#    public void addValue(Comparable<?>v){
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#191#                    if (ga * gb > 0) {
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#199#                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#200#                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#201#                            ta += epsilon;
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#202#                            interpolator.setInterpolatedTime(ta);
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#203#                            ga = handler.g(ta, interpolator.getInterpolatedState());
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#204#                        }
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#205#                        if (ga * gb > 0) {
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#207#                            throw MathRuntimeException.createInternalError(null);
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#208#                        }
Math-78.fixed.lines	org/apache/commons/math/ode/events/EventState.java#209#                    }
Math-85.fixed.lines	org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java#198#        if (fa * fb > 0.0 ) {
Math-56.fixed.lines	org/apache/commons/math/util/MultidimensionalCounter.java#237#        indices[last] = index - count;
Math-26.fixed.lines	org/apache/commons/math3/fraction/Fraction.java#181#        if (FastMath.abs(a0) > overflow) {
Math-26.fixed.lines	org/apache/commons/math3/fraction/Fraction.java#209#            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#267#        if (m instanceof DiagonalMatrix) {
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#268#            final int dim = m.getRowDimension();
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#269#            final RealMatrix sqrtM = new DiagonalMatrix(dim);
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#270#            for (int i = 0; i < dim; i++) {
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#271#                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#272#            }
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#273#            return sqrtM;
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#274#        } else {
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#277#        }
Math-14.fixed.lines	org/apache/commons/math3/optim/nonlinear/vector/Weight.java#43#        weightMatrix = new DiagonalMatrix(weight);
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#346#                for (final EventState state : eventsStates) {
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#347#                    state.stepAccepted(eventT, eventY);
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#348#                    isLastStep = isLastStep || state.stop();
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#349#                }
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#362#                boolean needReset = false;
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#363#                for (final EventState state : eventsStates) {
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#364#                    needReset =  needReset || state.reset(eventT, eventY);
Math-7.fixed.lines	org/apache/commons/math3/ode/AbstractIntegrator.java#365#                }
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#543#            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#544#                throw MathRuntimeException.createArithmeticException(
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#545#                        "overflow: gcd({0}, {1}) is 2^31",
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#546#                        new Object[] { p, q });
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#547#            }
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#719#        if (lcm == Integer.MIN_VALUE){
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#720#            throw new ArithmeticException("overflow: lcm is 2^31");
Math-99.fixed.lines	org/apache/commons/math/util/MathUtils.java#721#        }
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#258#        double[] oldObj  = new double[rows];
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#259#        double[] qtf     = new double[rows];
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#272#            for (int i=0;i<rows;i++) {
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#273#                qtf[i]=residuals[i];
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#274#            }
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#283#            qTy(qtf);
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#321#                            sum += jacobian[i][pj] * qtf[i];
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#329#            	updateResidualsAndCost();
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#330#            	current = new VectorialPointValuePair(point, objective);
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#351#                tmpVec    = objective;
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#352#                objective = oldObj;
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#353#                oldObj    = tmpVec;
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#356#                determineLMParameter(qtf, delta, diag, work1, work2, work3);
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#429#                    xNorm = Math.sqrt(xNorm);
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#430#                    current = new VectorialPointValuePair(point, objective);
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#433#                    if (checker != null) {
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#435#                    	if (checker.converged(getIterations(), previous, current)) {
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#436#                    		return current;
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#437#                    	}
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#438#                    }
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#449#                    tmpVec    = objective;
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#450#                    objective = oldObj;
Math-64.fixed.lines	org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#451#                    oldObj    = tmpVec;
Time-27.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#801#            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
Time-27.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#805#            }
Time-15.fixed.lines	org/joda/time/field/FieldUtils.java#138#                if (val1 == Long.MIN_VALUE) {
Time-15.fixed.lines	org/joda/time/field/FieldUtils.java#139#                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
Time-15.fixed.lines	org/joda/time/field/FieldUtils.java#140#                }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#196#            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#197#            if (cutoverDate.getYear() <= 0) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#198#                throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01.");
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#199#            }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#983#                        if (iConvertByWeekyear) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#984#                            int wyear = iGregorianChronology.weekyear().get(instant);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#985#                            if (wyear <= 0) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#986#                                instant = iGregorianChronology.weekyear().add(instant, -1);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#987#                            }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#988#                        } else {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#989#                            int year = iGregorianChronology.year().get(instant);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#990#                            if (year <= 0) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#991#                                instant = iGregorianChronology.year().add(instant, -1);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#992#                            }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#993#                        }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1016#                        if (iConvertByWeekyear) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1017#                            int wyear = iGregorianChronology.weekyear().get(instant);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1018#                            if (wyear <= 0) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1019#                                instant = iGregorianChronology.weekyear().add(instant, -1);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1020#                            }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1021#                        } else {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1022#                            int year = iGregorianChronology.year().get(instant);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1023#                            if (year <= 0) {
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1024#                                instant = iGregorianChronology.year().add(instant, -1);
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1025#                            }
Time-6.fixed.lines	org/joda/time/chrono/GJChronology.java#1026#                        }
Time-19.fixed.lines	org/joda/time/DateTimeZone.java#900#        } else if (offsetLocal >= 0) {
Time-22.fixed.lines	org/joda/time/base/BasePeriod.java#222#        super();
Time-22.fixed.lines	org/joda/time/base/BasePeriod.java#224#        iType = PeriodType.time();
Time-22.fixed.lines	org/joda/time/base/BasePeriod.java#225#        int[] values = ISOChronology.getInstanceUTC().get(this, duration);
Time-22.fixed.lines	org/joda/time/base/BasePeriod.java#226#        iType = PeriodType.standard();
Time-22.fixed.lines	org/joda/time/base/BasePeriod.java#227#        iValues = new int[8];
Time-22.fixed.lines	org/joda/time/base/BasePeriod.java#228#        System.arraycopy(values, 0, iValues, 4, 4);
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#639#        if (amount != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#641#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#662#        if (years != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#664#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#685#        if (weekyears != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#687#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#708#        if (months != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#710#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#731#        if (weeks != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#733#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#774#        if (days != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#776#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#797#        if (hours != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#799#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#830#        if (minutes != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#832#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#863#        if (seconds != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#865#        }
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#898#        if (millis != 0) {
Time-3.fixed.lines	org/joda/time/MutableDateTime.java#900#        }
Time-10.fixed.lines	org/joda/time/base/BaseSingleFieldPeriod.java#52#    private static final long START_1972 = 2L * 365L * 86400L * 1000L;
Time-10.fixed.lines	org/joda/time/base/BaseSingleFieldPeriod.java#105#        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));
Time-13.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#1098#                sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));
Time-13.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#1133#            int bufLen = buf.length();
Time-13.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#1143#                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {
Time-13.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#1144#                        buf.insert(bufLen, '-');
Time-13.fixed.lines	org/joda/time/format/PeriodFormatterBuilder.java#1145#                    }
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#66#            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#67#            String[] setEn = null;
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#68#            for (String[] strings : zoneStringsEn) {
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#69#              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#70#                setEn = strings;
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#71#                break;
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#72#              }
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#73#            }
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#79#                break;
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#80#              }
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#81#            }
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#83#            if (setEn != null && setLoc != null) {
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#84#              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#88#              if (setEn[2].equals(setEn[4])) {
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#89#                  byNameKeyCache.put(setEn[4] + "-Summer", new String[] {setLoc[4], setLoc[3]});
Time-21.fixed.lines	org/joda/time/tz/DefaultNameProvider.java#91#                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#258#        if (hoursOffset < -23 || hoursOffset > 23) {
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#259#            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#260#        }
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#266#            int hoursInMinutes = hoursOffset * 60;
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#268#                minutesOffset = hoursInMinutes - minutesOffset;
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#270#                minutesOffset = hoursInMinutes + minutesOffset;
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#286#        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#287#            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
Time-9.fixed.lines	org/joda/time/DateTimeZone.java#288#        }
Time-16.fixed.lines	org/joda/time/format/DateTimeFormatter.java#709#            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));
Time-5.fixed.lines	org/joda/time/Period.java#1628#            long totalMonths = years * 12L + months;
Time-5.fixed.lines	org/joda/time/Period.java#1629#            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
Time-5.fixed.lines	org/joda/time/Period.java#1630#                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
Time-5.fixed.lines	org/joda/time/Period.java#1631#                result = result.withYears(normalizedYears);
Time-5.fixed.lines	org/joda/time/Period.java#1632#                totalMonths = totalMonths - (normalizedYears * 12);
Time-5.fixed.lines	org/joda/time/Period.java#1634#            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
Time-5.fixed.lines	org/joda/time/Period.java#1635#                int normalizedMonths = FieldUtils.safeToInt(totalMonths);
Time-5.fixed.lines	org/joda/time/Period.java#1636#                result = result.withMonths(normalizedMonths);
Time-5.fixed.lines	org/joda/time/Period.java#1637#                totalMonths = totalMonths - normalizedMonths;
Time-5.fixed.lines	org/joda/time/Period.java#1638#            }
Time-5.fixed.lines	org/joda/time/Period.java#1639#            if (totalMonths != 0) {
Time-5.fixed.lines	org/joda/time/Period.java#1640#                throw new UnsupportedOperationException("Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: " + toString());
Time-24.fixed.lines	org/joda/time/format/DateTimeParserBucket.java#355#            if (resetFields) {
Time-24.fixed.lines	org/joda/time/format/DateTimeParserBucket.java#356#                for (int i = 0; i < count; i++) {
Time-24.fixed.lines	org/joda/time/format/DateTimeParserBucket.java#357#                    millis = savedFields[i].set(millis, i == (count - 1));
Time-24.fixed.lines	org/joda/time/format/DateTimeParserBucket.java#358#                }
Time-24.fixed.lines	org/joda/time/format/DateTimeParserBucket.java#359#            }
Time-11.fixed.lines	org/joda/time/tz/ZoneInfoCompiler.java#68#    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {
Time-11.fixed.lines	org/joda/time/tz/ZoneInfoCompiler.java#69#        protected Boolean initialValue() {
Time-11.fixed.lines	org/joda/time/tz/ZoneInfoCompiler.java#70#            return Boolean.FALSE;
Time-11.fixed.lines	org/joda/time/tz/ZoneInfoCompiler.java#71#        }
Time-11.fixed.lines	org/joda/time/tz/ZoneInfoCompiler.java#72#    };
Time-2.fixed.lines	org/joda/time/Partial.java#218#                if (compare < 0) {
Time-2.fixed.lines	org/joda/time/Partial.java#449#                            if (fieldType.getRangeDurationType() == null) {
Time-2.fixed.lines	org/joda/time/Partial.java#450#                                break;
Time-2.fixed.lines	org/joda/time/Partial.java#451#                            }
Time-2.fixed.lines	org/joda/time/field/UnsupportedDurationField.java#227#        if (durationField.isSupported()) {
Time-2.fixed.lines	org/joda/time/field/UnsupportedDurationField.java#228#            return 1;
Time-2.fixed.lines	org/joda/time/field/UnsupportedDurationField.java#229#        }
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#564#            map.put("WET", "WET");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#565#            map.put("CET", "CET");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#566#            map.put("MET", "CET");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#567#            map.put("ECT", "CET");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#568#            map.put("EET", "EET");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#577#            map.put("IET", "America/Indiana/Indianapolis");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#580#            map.put("AGT", "America/Argentina/Buenos_Aires");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#587#            map.put("IST", "Asia/Kolkata");
Time-23.fixed.lines	org/joda/time/DateTimeZone.java#589#            map.put("VST", "Asia/Ho_Chi_Minh");
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#364#        try {
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#368#        } catch (IllegalFieldValueException ex) {
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#369#            if (monthOfYear != 2 || dayOfMonth != 29) {
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#370#                throw ex;
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#371#            }
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#372#            instant = iGregorianChronology.getDateTimeMillis
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#373#                (year, monthOfYear, 28,
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#374#                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#375#            if (instant >= iCutoverMillis) {
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#376#                throw ex;
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#377#            }
Time-18.fixed.lines	org/joda/time/chrono/GJChronology.java#378#        }
Time-7.fixed.lines	org/joda/time/format/DateTimeFormatter.java#708#        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);
Time-14.fixed.lines	org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#209#        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
Time-14.fixed.lines	org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#211#            int curMonth0 = partial.getValue(0) - 1;
Time-14.fixed.lines	org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#212#            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
Time-14.fixed.lines	org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#213#            return set(partial, 0, values, newMonth);
Time-14.fixed.lines	org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#214#        }
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#436#               return iZone.convertLocalToUTC(localInstant, false, instant);
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#448#               return iZone.convertLocalToUTC(localInstant, false, instant);
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#460#                return iZone.convertLocalToUTC(localInstant, false, instant);
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#467#            long result = iZone.convertLocalToUTC(localInstant, false, instant);
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#481#            return iZone.convertLocalToUTC(localInstant, false, instant);
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#528#                return iZone.convertLocalToUTC(localInstant, false, instant);
Time-26.fixed.lines	org/joda/time/chrono/ZonedChronology.java#540#                return iZone.convertLocalToUTC(localInstant, false, instant);
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#899#        } else if (offsetLocal > 0) {
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#900#            long prev = previousTransition(instantAdjusted);
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#901#            if (prev < instantAdjusted) {
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#902#                int offsetPrev = getOffset(prev);
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#903#                int diff = offsetPrev - offsetLocal;
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#904#                if (instantAdjusted - prev <= diff) {
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#905#                    return offsetPrev;
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#906#                }
Time-25.fixed.lines	org/joda/time/DateTimeZone.java#907#            }
Time-4.fixed.lines	org/joda/time/Partial.java#464#            Partial newPartial = new Partial(newTypes, newValues, iChronology);
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1167#        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1168#        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1169#        long offsetBefore = getOffset(instantBefore);
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1170#        long offsetAfter = getOffset(instantAfter);
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1171#        if (offsetBefore <= offsetAfter) {
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1176#        long diff = offsetBefore - offsetAfter;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1177#        long transition = nextTransition(instantBefore);
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1178#        long overlapStart = transition - diff;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1179#        long overlapEnd = transition + diff;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1180#        if (instant < overlapStart || instant >= overlapEnd) {
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1181#          return instant;  // not an overlap
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1182#        }
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1185#        long afterStart = instant - overlapStart;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1186#        if (afterStart >= diff) {
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1188#          return earlierOrLater ? instant : instant - diff;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1189#        } else {
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1191#          return earlierOrLater ? instant + diff : instant;
Time-17.fixed.lines	org/joda/time/DateTimeZone.java#1192#        }
Time-8.fixed.lines	org/joda/time/DateTimeZone.java#279#        if (minutesOffset < -59 || minutesOffset > 59) {
Time-8.fixed.lines	org/joda/time/DateTimeZone.java#282#        if (hoursOffset > 0 && minutesOffset < 0) {
Time-8.fixed.lines	org/joda/time/DateTimeZone.java#283#            throw new IllegalArgumentException("Positive hours must not have negative minutes: " + minutesOffset);
Time-8.fixed.lines	org/joda/time/DateTimeZone.java#284#        }
Time-8.fixed.lines	org/joda/time/DateTimeZone.java#289#                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2542#            String best = null;
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2545#                	if (best == null || id.length() > best.length()) {
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2546#                		best = id;
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2547#                	}
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2549#            }
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2550#            if (best != null) {
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2551#                bucket.setZone(DateTimeZone.forID(best));
Time-20.fixed.lines	org/joda/time/format/DateTimeFormatterBuilder.java#2552#                return position + best.length();
Time-12.fixed.lines	org/joda/time/LocalDate.java#210#        int era = calendar.get(Calendar.ERA);
Time-12.fixed.lines	org/joda/time/LocalDate.java#213#            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
Time-12.fixed.lines	org/joda/time/LocalDate.java#244#        if (date.getTime() < 0) {
Time-12.fixed.lines	org/joda/time/LocalDate.java#246#            GregorianCalendar cal = new GregorianCalendar();
Time-12.fixed.lines	org/joda/time/LocalDate.java#247#            cal.setTime(date);
Time-12.fixed.lines	org/joda/time/LocalDate.java#248#            return fromCalendarFields(cal);
Time-12.fixed.lines	org/joda/time/LocalDate.java#249#        }
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#199#        int era = calendar.get(Calendar.ERA);
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#202#            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#237#        if (date.getTime() < 0) {
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#239#            GregorianCalendar cal = new GregorianCalendar();
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#240#            cal.setTime(date);
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#241#            return fromCalendarFields(cal);
Time-12.fixed.lines	org/joda/time/LocalDateTime.java#242#        }
Time-1.fixed.lines	org/joda/time/Partial.java#217#                if (loopUnitField.isSupported() == false) {
Time-1.fixed.lines	org/joda/time/Partial.java#218#                    if (lastUnitField.isSupported()) {
Time-1.fixed.lines	org/joda/time/Partial.java#219#                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " +
Time-1.fixed.lines	org/joda/time/Partial.java#220#                                        types[i - 1].getName() + " < " + loopType.getName());
Time-1.fixed.lines	org/joda/time/Partial.java#221#                    } else {
Time-1.fixed.lines	org/joda/time/Partial.java#222#                        throw new IllegalArgumentException("Types array must not contain duplicate unsupported: " +
Time-1.fixed.lines	org/joda/time/Partial.java#223#                                        types[i - 1].getName() + " and " + loopType.getName());
Time-1.fixed.lines	org/joda/time/Partial.java#224#                    }
Time-1.fixed.lines	org/joda/time/Partial.java#225#                }
Time-1.fixed.lines	org/joda/time/Partial.java#230#                } else if (compare == 0 && lastUnitField.equals(loopUnitField)) {
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1446#		int csLastIndex = csLength - 1;
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1447#		int searchLastIndex = searchLength - 1;
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1452#					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1454#						if (searchChars[j + 1] == cs.charAt(i + 1)) {
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1455#							return true;
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1456#						}
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1457#					} else {
Lang-31.fixed.lines	org/apache/commons/lang3/StringUtils.java#1460#					}
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#191#        StringBuffer arrayPrefix = new StringBuffer();
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#194#        if (className.startsWith("[")) {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#195#            while (className.charAt(0) == '[') {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#196#                className = className.substring(1);
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#197#                arrayPrefix.append("[]");
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#198#            }
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#200#            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#201#                className = className.substring(1, className.length() - 1);
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#202#            }
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#203#        }
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#205#        if (reverseAbbreviationMap.containsKey(className)) {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#206#            className = reverseAbbreviationMap.get(className);
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#207#        }
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#216#        return out + arrayPrefix;
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#258#        if (className == null || className.length() == 0) {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#263#        while (className.charAt(0) == '[') {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#264#            className = className.substring(1);
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#265#        }
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#267#        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#268#            className = className.substring(1);
Lang-41.fixed.lines	org/apache/commons/lang/ClassUtils.java#269#        }
Lang-16.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#458#        if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
Lang-48.fixed.lines	org/apache/commons/lang/builder/EqualsBuilder.java#380#            if (lhs instanceof java.math.BigDecimal) {
Lang-48.fixed.lines	org/apache/commons/lang/builder/EqualsBuilder.java#381#                isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);
Lang-48.fixed.lines	org/apache/commons/lang/builder/EqualsBuilder.java#382#            } else {
Lang-48.fixed.lines	org/apache/commons/lang/builder/EqualsBuilder.java#385#            }
Lang-38.fixed.lines	org/apache/commons/lang3/time/FastDateFormat.java#872#            calendar.getTime(); /// LANG-538
Lang-24.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1413#                return foundDigit && !hasExp && !hasDecPoint;
Lang-9.fixed.lines	org/apache/commons/lang3/time/FastDateParser.java#144#        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
Lang-9.fixed.lines	org/apache/commons/lang3/time/FastDateParser.java#145#            throw new IllegalArgumentException("Failed to parse \""+pattern+"\" ; gave up at index "+patternMatcher.regionStart());
Lang-9.fixed.lines	org/apache/commons/lang3/time/FastDateParser.java#146#        }
Lang-54.fixed.lines	org/apache/commons/lang/LocaleUtils.java#114#            if (ch3 == '_') {
Lang-54.fixed.lines	org/apache/commons/lang/LocaleUtils.java#115#                return new Locale(str.substring(0, 2), "", str.substring(4));
Lang-54.fixed.lines	org/apache/commons/lang/LocaleUtils.java#116#            }
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#239#        private static final Map<String, Class<?>> primitiveTypes = 
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#240#                new HashMap<String, Class<?>>();
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#254#            primitiveTypes.put("byte", byte.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#255#            primitiveTypes.put("short", short.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#256#            primitiveTypes.put("int", int.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#257#            primitiveTypes.put("long", long.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#258#            primitiveTypes.put("float", float.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#259#            primitiveTypes.put("double", double.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#260#            primitiveTypes.put("boolean", boolean.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#261#            primitiveTypes.put("char", char.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#262#            primitiveTypes.put("void", void.class);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#279#                try {
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#281#                } catch (ClassNotFoundException cnfe) {
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#282#                    Class<?> cls = primitiveTypes.get(name);
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#283#                    if (cls != null)
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#284#                        return cls;
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#285#                    else
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#286#                        throw cnfe;
Lang-13.fixed.lines	org/apache/commons/lang3/SerializationUtils.java#287#                }
Lang-63.fixed.lines	org/apache/commons/lang/time/DurationFormatUtils.java#306#            end.add(Calendar.MONTH, -1);
Lang-63.fixed.lines	org/apache/commons/lang/time/DurationFormatUtils.java#307#            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);
Lang-63.fixed.lines	org/apache/commons/lang/time/DurationFormatUtils.java#314#            end.add(Calendar.MONTH, 1);
Lang-51.fixed.lines	org/apache/commons/lang/BooleanUtils.java#682#                return false;
Lang-21.fixed.lines	org/apache/commons/lang3/time/DateUtils.java#265#                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&
Lang-44.fixed.lines	org/apache/commons/lang/NumberUtils.java#145#        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {
Lang-44.fixed.lines	org/apache/commons/lang/NumberUtils.java#146#            throw new NumberFormatException(val + " is not a valid number.");
Lang-44.fixed.lines	org/apache/commons/lang/NumberUtils.java#147#        }
Lang-34.fixed.lines	org/apache/commons/lang3/builder/ToStringStyle.java#148#        return REGISTRY.get();
Lang-34.fixed.lines	org/apache/commons/lang3/builder/ToStringStyle.java#164#        return m != null && m.containsKey(value);
Lang-28.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#63#            if(entityValue > 0xFFFF) {
Lang-28.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#64#                char[] chrs = Character.toChars(entityValue);
Lang-28.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#65#                out.write(chrs[0]);
Lang-28.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#66#                out.write(chrs[1]);
Lang-28.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#67#            } else {
Lang-28.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#69#            }
Lang-58.fixed.lines	org/apache/commons/lang/math/NumberUtils.java#454#                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#97#        if (ch0 == '_') {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#98#            if (len < 3) {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#99#                throw new IllegalArgumentException("Invalid locale format: " + str);
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#100#            }
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#101#            final char ch1 = str.charAt(1);
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#102#            final char ch2 = str.charAt(2);
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#103#            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#104#                throw new IllegalArgumentException("Invalid locale format: " + str);
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#105#            }
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#106#            if (len == 3) {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#107#                return new Locale("", str.substring(1, 3));
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#108#            }
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#109#            if (len < 5) {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#110#                throw new IllegalArgumentException("Invalid locale format: " + str);
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#111#            }
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#112#            if (str.charAt(3) != '_') {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#113#                throw new IllegalArgumentException("Invalid locale format: " + str);
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#114#            }
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#115#            return new Locale("", str.substring(1, 3), str.substring(4));
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#116#        } else {
Lang-5.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#148#        }
Lang-6.fixed.lines	org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#95#                pos += Character.charCount(Character.codePointAt(input, pt));
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#40#        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#50#                if(start == seqEnd) {
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#51#                    return 0;
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#52#                }
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#57#            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#58#                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#59#                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#84#            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
Lang-19.fixed.lines	org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#86#            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
Lang-47.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1186#            if (str == null) {
Lang-47.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1187#                str = "";
Lang-47.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1188#            }
Lang-47.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1233#            if (str == null) {
Lang-47.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1234#                str = "";
Lang-47.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1235#            }
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2962#        try {
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2964#        } catch (ArrayStoreException ase) {
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2966#            final Class<?> type2 = array2.getClass().getComponentType();
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2967#            if (!type1.isAssignableFrom(type2)){
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2968#                throw new IllegalArgumentException("Cannot store "+type2.getName()+" in an array of "+type1.getName());
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2969#            }
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2970#            throw ase; // No, so rethrow original
Lang-37.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#2971#        }
Lang-52.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#236#                    case '/':
Lang-52.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#237#                        out.write('\\');
Lang-52.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#238#                        out.write('/');
Lang-52.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#239#                        break;
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#583#        if ((u == 0) || (v == 0)) {
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#584#            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#585#                throw new ArithmeticException("overflow: gcd is 2^31");
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#586#            }
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#587#            return Math.abs(u) + Math.abs(v);
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#588#        }
Lang-22.fixed.lines	org/apache/commons/lang3/math/Fraction.java#590#        if (Math.abs(u) == 1 || Math.abs(v) == 1) {
Lang-60.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1673#        for (int i = 0; i < this.size; i++) {
Lang-60.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1730#        for (int i = startIndex; i < size; i++) {
Lang-27.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#479#                if (expPos < decPos || expPos > str.length()) {
Lang-27.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#489#                if (expPos > str.length()) {
Lang-27.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#490#                    throw new NumberFormatException(str + " is not a valid number.");
Lang-27.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#491#                }
Lang-57.fixed.lines	org/apache/commons/lang/LocaleUtils.java#223#        return availableLocaleList().contains(locale);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#624#        if (field == Calendar.MILLISECOND) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#625#            return;
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#626#        }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#634#        Date date = val.getTime();
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#635#        long time = date.getTime();
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#636#        boolean done = false;
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#639#        int millisecs = val.get(Calendar.MILLISECOND);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#640#        if (!round || millisecs < 500) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#641#            time = time - millisecs;
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#642#            if (field == Calendar.SECOND) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#643#                done = true;
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#644#            }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#645#        }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#648#        int seconds = val.get(Calendar.SECOND);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#649#        if (!done && (!round || seconds < 30)) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#650#            time = time - (seconds * 1000L);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#651#            if (field == Calendar.MINUTE) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#652#                done = true;
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#653#            }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#654#        }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#657#        int minutes = val.get(Calendar.MINUTE);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#658#        if (!done && (!round || minutes < 30)) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#659#            time = time - (minutes * 60000L);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#660#        }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#663#        if (date.getTime() != time) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#664#            date.setTime(time);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#665#            val.setTime(date);
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#666#        }
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#737#            if (offset != 0) {
Lang-65.fixed.lines	org/apache/commons/lang/time/DateUtils.java#739#            }
Lang-15.fixed.lines	org/apache/commons/lang3/reflect/TypeUtils.java#219#        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
Lang-15.fixed.lines	org/apache/commons/lang3/reflect/TypeUtils.java#220#            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
Lang-15.fixed.lines	org/apache/commons/lang3/reflect/TypeUtils.java#221#            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);
Lang-15.fixed.lines	org/apache/commons/lang3/reflect/TypeUtils.java#675#        if (toClass.equals(cls)) {
Lang-3.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#593#            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
Lang-3.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#598#            }
Lang-3.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#603#            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
Lang-3.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#608#            }
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#104#    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#147#        Set<IDKey> registry = getRegistry();
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#148#        return registry != null && registry.contains(new IDKey(value));
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#518#        synchronized (HashCodeBuilder.class) {
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#519#            if (getRegistry() == null) {
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#520#                REGISTRY.set(new HashSet<IDKey>());
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#521#            }
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#522#        }
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#539#        Set<IDKey> s = getRegistry();
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#540#        if (s != null) {
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#541#            s.remove(new IDKey(value));
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#542#            synchronized (HashCodeBuilder.class) {
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#543#                if (s.isEmpty()) {
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#544#                    REGISTRY.remove();
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#545#                }
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#546#            }
Lang-32.fixed.lines	org/apache/commons/lang3/builder/HashCodeBuilder.java#547#        }
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#828#            int c = Character.codePointAt(str, i); 
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#831#                if (c >= 0x010000 && i < len - 1) {
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#832#                    writer.write("&#");
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#833#                    writer.write(Integer.toString(c, 10));
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#834#                    writer.write(';');
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#835#                    i++;
Lang-42.fixed.lines	org/apache/commons/lang/Entities.java#836#                } else if (c > 0x7F) { 
Lang-4.fixed.lines	org/apache/commons/lang3/text/translate/LookupTranslator.java#31#    private final HashMap<String, CharSequence> lookupMap;
Lang-4.fixed.lines	org/apache/commons/lang3/text/translate/LookupTranslator.java#46#        lookupMap = new HashMap<String, CharSequence>();
Lang-4.fixed.lines	org/apache/commons/lang3/text/translate/LookupTranslator.java#51#                this.lookupMap.put(seq[0].toString(), seq[1]);
Lang-4.fixed.lines	org/apache/commons/lang3/text/translate/LookupTranslator.java#77#            final CharSequence result = lookupMap.get(subSeq.toString());
Lang-59.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#884#                str.getChars(0, width, buffer, size);
Lang-29.fixed.lines	org/apache/commons/lang3/SystemUtils.java#1672#    static int toJavaVersionInt(String version) {
Lang-35.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#3295#            throw new IllegalArgumentException("Arguments cannot both be null");            
Lang-35.fixed.lines	org/apache/commons/lang3/ArrayUtils.java#3574#            throw new IllegalArgumentException("Array and element cannot both be null");            
Lang-45.fixed.lines	org/apache/commons/lang/WordUtils.java#616#        if (lower > str.length()) {
Lang-45.fixed.lines	org/apache/commons/lang/WordUtils.java#617#            lower = str.length();    
Lang-45.fixed.lines	org/apache/commons/lang/WordUtils.java#618#        }
Lang-20.fixed.lines	org/apache/commons/lang3/StringUtils.java#3298#        StringBuilder buf = new StringBuilder(noOfItems * 16);
Lang-20.fixed.lines	org/apache/commons/lang3/StringUtils.java#3383#        StringBuilder buf = new StringBuilder(noOfItems * 16);
Lang-50.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#285#        if (locale == null) {
Lang-50.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#286#            locale = Locale.getDefault();
Lang-50.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#289#        key = new Pair(key, locale);
Lang-50.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#463#        if (locale == null) {
Lang-50.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#464#            locale = Locale.getDefault();
Lang-50.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#466#        key = new Pair(key, locale);
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#850#                            if (entityValue > 0xFFFF) {
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#851#                                entityValue = -1;
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#852#                            }
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#923#                                        break;
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#929#                                if (entityValue > 0xFFFF) {
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#930#                                    entityValue = -1;
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#931#                                }
Lang-62.fixed.lines	org/apache/commons/lang/Entities.java#933#                                entityValue = -1;
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#230#        if (chars != null && chars.length == 0) {
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#231#            throw new IllegalArgumentException("The chars array must not be empty");
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#232#        }
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#235#            if (chars != null) {
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#236#                end = chars.length;
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#237#            } else {
Lang-12.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#244#            }
Lang-55.fixed.lines	org/apache/commons/lang/time/StopWatch.java#118#        if(this.runningState == STATE_RUNNING) {
Lang-55.fixed.lines	org/apache/commons/lang/time/StopWatch.java#120#        }
Lang-8.fixed.lines	org/apache/commons/lang3/time/FastDatePrinter.java#1132#            TimeZone zone = calendar.getTimeZone();
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#74#        {"\u00CA", "&Ecirc;"}, // Ê - uppercase E, circumflex accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#75#        {"\u00CB", "&Euml;"}, // Ë - uppercase E, umlaut
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#76#        {"\u00CC", "&Igrave;"}, // Ì - uppercase I, grave accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#77#        {"\u00CD", "&Iacute;"}, // Í - uppercase I, acute accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#78#        {"\u00CE", "&Icirc;"}, // Î - uppercase I, circumflex accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#79#        {"\u00CF", "&Iuml;"}, // Ï - uppercase I, umlaut
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#80#        {"\u00D0", "&ETH;"}, // Ð - uppercase Eth, Icelandic
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#81#        {"\u00D1", "&Ntilde;"}, // Ñ - uppercase N, tilde
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#82#        {"\u00D2", "&Ograve;"}, // Ò - uppercase O, grave accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#83#        {"\u00D3", "&Oacute;"}, // Ó - uppercase O, acute accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#84#        {"\u00D4", "&Ocirc;"}, // Ô - uppercase O, circumflex accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#85#        {"\u00D5", "&Otilde;"}, // Õ - uppercase O, tilde
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#86#        {"\u00D6", "&Ouml;"}, // Ö - uppercase O, umlaut
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#87#        {"\u00D7", "&times;"}, // multiplication sign
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#88#        {"\u00D8", "&Oslash;"}, // Ø - uppercase O, slash
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#89#        {"\u00D9", "&Ugrave;"}, // Ù - uppercase U, grave accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#90#        {"\u00DA", "&Uacute;"}, // Ú - uppercase U, acute accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#91#        {"\u00DB", "&Ucirc;"}, // Û - uppercase U, circumflex accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#92#        {"\u00DC", "&Uuml;"}, // Ü - uppercase U, umlaut
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#93#        {"\u00DD", "&Yacute;"}, // Ý - uppercase Y, acute accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#94#        {"\u00DE", "&THORN;"}, // Þ - uppercase THORN, Icelandic
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#95#        {"\u00DF", "&szlig;"}, // ß - lowercase sharps, German
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#96#        {"\u00E0", "&agrave;"}, // à - lowercase a, grave accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#97#        {"\u00E1", "&aacute;"}, // á - lowercase a, acute accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#98#        {"\u00E2", "&acirc;"}, // â - lowercase a, circumflex accent
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#99#        {"\u00E3", "&atilde;"}, // ã - lowercase a, tilde
Lang-25.fixed.lines	org/apache/commons/lang3/text/translate/EntityArrays.java#100#        {"\u00E4", "&auml;"}, // ä - lowercase a, umlaut
Lang-17.fixed.lines	org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#83#        int len = input.length();
Lang-17.fixed.lines	org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#89#                pos+= c.length;
Lang-17.fixed.lines	org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#90#                continue;
Lang-39.fixed.lines	org/apache/commons/lang3/StringUtils.java#3676#            if (searchList[i] == null || replacementList[i] == null) {
Lang-39.fixed.lines	org/apache/commons/lang3/StringUtils.java#3677#                continue;
Lang-39.fixed.lines	org/apache/commons/lang3/StringUtils.java#3678#            }
Lang-49.fixed.lines	org/apache/commons/lang/math/Fraction.java#466#        if (numerator == 0) {
Lang-49.fixed.lines	org/apache/commons/lang/math/Fraction.java#467#            return equals(ZERO) ? this : ZERO;
Lang-49.fixed.lines	org/apache/commons/lang/math/Fraction.java#468#        }
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#467#            char firstSigDigit = 0; // strip leading zeroes
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#468#            for(int i = pfxLen; i < str.length(); i++) {
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#469#                firstSigDigit = str.charAt(i);
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#470#                if (firstSigDigit == '0') { // count leading zeroes
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#471#                    pfxLen++;
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#472#                } else {
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#473#                    break;
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#474#                }
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#475#            }
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#477#            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long
Lang-1.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#480#            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1048#        int len = searchStr.length();
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1049#        int max = str.length() - len;
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1050#        for (int i = 0; i <= max; i++) {
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1051#            if (str.regionMatches(true, i, searchStr, 0, len)) {
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1052#                return true;
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1053#            }
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1054#        }
Lang-40.fixed.lines	org/apache/commons/lang/StringUtils.java#1055#        return false;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1376#        int csLast = csLen - 1;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1378#        int searchLast = searchLen - 1;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1383#                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1385#                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1386#                            return i;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1387#                        }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1388#                    } else {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1390#                    }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1451#    public static boolean containsAny(String cs, char[] searchChars) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1463#                    if (Character.isHighSurrogate(ch)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1464#                        if (j == searchLast) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1466#                            return true;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1467#                        }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1468#                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1508#    public static boolean containsAny(String cs, String searchChars) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1544#        int csLast = csLen - 1;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1546#        int searchLast = searchLen - 1;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1552#                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1553#                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1554#                            continue outer;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1555#                        }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1556#                    } else {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1558#                    }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1595#            boolean chFound = searchChars.indexOf(ch) >= 0;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1596#            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1597#                char ch2 = str.charAt(i + 1);
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1598#                if (chFound && searchChars.indexOf(ch2) < 0) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1600#                }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1601#            } else {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1602#                if (!chFound) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1603#                    return i;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1604#                }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1705#        int csLast = csLen - 1;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1707#        int searchLast = searchLen - 1;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1712#                    if (Character.isHighSurrogate(ch)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1713#                        if (j == searchLast) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1715#                            return false;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1716#                        }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1717#                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1718#                            return false;
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1719#                        }
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1720#                    } else {
Lang-30.fixed.lines	org/apache/commons/lang3/StringUtils.java#1723#                    }
Lang-43.fixed.lines	org/apache/commons/lang/text/ExtendedMessageFormat.java#422#            next(pos);
Lang-33.fixed.lines	org/apache/commons/lang3/ClassUtils.java#910#            classes[i] = array[i] == null ? null : array[i].getClass();
Lang-2.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#92#        if (str.contains("#")) { // LANG-879 - Cannot handle Java 7 script & extensions
Lang-2.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#93#            throw new IllegalArgumentException("Invalid locale format: " + str);
Lang-2.fixed.lines	org/apache/commons/lang3/LocaleUtils.java#94#        }
Lang-14.fixed.lines	org/apache/commons/lang3/StringUtils.java#788#        if (cs1 instanceof String && cs2 instanceof String) {
Lang-14.fixed.lines	org/apache/commons/lang3/StringUtils.java#790#        }
Lang-14.fixed.lines	org/apache/commons/lang3/StringUtils.java#791#        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#183#        if (other == this) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#184#            return 0;
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#185#        }
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#186#        if (other.getClass() != this.getClass()) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#187#            if (other.getClass().getName().equals(this.getClass().getName())) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#188#                return iValue - getValueInOtherClassLoader(other);
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#189#            }
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#190#            throw new ClassCastException(
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#191#                    "Different enum class '" + ClassUtils.getShortClassName(other.getClass()) + "'");
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#192#        }
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#202#    private int getValueInOtherClassLoader(Object other) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#203#        try {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#204#            Method mth = other.getClass().getMethod("getValue", null);
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#205#            Integer value = (Integer) mth.invoke(other, null);
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#206#            return value.intValue();
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#207#        } catch (NoSuchMethodException e) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#209#        } catch (IllegalAccessException e) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#211#        } catch (InvocationTargetException e) {
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#213#        }
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#214#        throw new IllegalStateException("This should not happen");
Lang-64.fixed.lines	org/apache/commons/lang/enums/ValuedEnum.java#215#    }
Lang-56.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#140#    private transient Rule[] mRules;
Lang-56.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#144#    private transient int mMaxLengthEstimate;
Lang-56.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#1022#    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
Lang-56.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#1023#        in.defaultReadObject();
Lang-56.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#1024#        init();
Lang-56.fixed.lines	org/apache/commons/lang/time/FastDateFormat.java#1025#    }
Lang-26.fixed.lines	org/apache/commons/lang3/time/FastDateFormat.java#820#        Calendar c = new GregorianCalendar(mTimeZone, mLocale);
Lang-61.fixed.lines	org/apache/commons/lang/text/StrBuilder.java#1776#        int len = size - strLen + 1;
Lang-11.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#245#        } else {
Lang-11.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#246#            if (end <= start) {
Lang-11.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#247#                throw new IllegalArgumentException("Parameter end (" + end + ") must be greater than start (" + start + ")");
Lang-11.fixed.lines	org/apache/commons/lang3/RandomStringUtils.java#248#            }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#73#    private static final int HASH_SEED = 31;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#264#    @Override
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#265#    public boolean equals(Object obj) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#266#        if (obj == this) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#267#            return true;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#268#        }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#269#        if (obj == null) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#270#            return false;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#271#        }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#272#        if (!super.equals(obj)) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#273#            return false;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#274#        }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#275#        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#276#          return false;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#277#        }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#278#        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#279#        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#280#            return false;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#281#        }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#282#        if (ObjectUtils.notEqual(registry, rhs.registry)) {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#283#            return false;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#284#        }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#285#        return true;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#286#    }
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#293#    @Override
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#294#    public int hashCode() {
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#295#        int result = super.hashCode();
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#296#        result = HASH_SEED * result + ObjectUtils.hashCode(registry);
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#297#        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#298#        return result;
Lang-23.fixed.lines	org/apache/commons/lang3/text/ExtendedMessageFormat.java#299#    }
Lang-53.fixed.lines	org/apache/commons/lang/time/DateUtils.java#643#        }
Lang-53.fixed.lines	org/apache/commons/lang/time/DateUtils.java#652#        }
Lang-18.fixed.lines	org/apache/commons/lang3/time/FastDateFormat.java#495#                if (tokenLen == 2) {
Lang-18.fixed.lines	org/apache/commons/lang3/time/FastDateFormat.java#496#                    rule = TwoDigitYearField.INSTANCE;
Lang-18.fixed.lines	org/apache/commons/lang3/time/FastDateFormat.java#498#                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#491#        if (!Character.isDigit(lastChar) && lastChar != '.') {
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1387#            }
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1388#            if (chars[i] == '.') {
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1389#                if (hasDecPoint || hasExp) {
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1390#                    // two decimal points or dec in exponent
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1391#                    return false;
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1392#                }
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1393#                // single trailing decimal point after non-exponent is ok
Lang-36.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#1394#                return foundDigit;
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#86#        return escapeJavaStyleString(str, false, false);
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#102#        escapeJavaStyleString(out, str, false, false);
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#127#        return escapeJavaStyleString(str, true, true);
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#143#        escapeJavaStyleString(out, str, true, true);
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#154#    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#160#            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#178#    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#179#            boolean escapeForwardSlash) throws IOException {
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#245#                        if (escapeForwardSlash) {
Lang-46.fixed.lines	org/apache/commons/lang/StringEscapeUtils.java#247#                        }
Lang-7.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#718#        if (str.trim().startsWith("--")) {
Lang-7.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#723#            throw new NumberFormatException(str + " is not a valid number.");
Lang-7.fixed.lines	org/apache/commons/lang3/math/NumberUtils.java#724#        }
Mockito-32.fixed.lines	org/mockito/internal/configuration/SpyAnnotationEngine.java#19#import static org.mockito.Mockito.withSettings;
Mockito-32.fixed.lines	org/mockito/internal/configuration/SpyAnnotationEngine.java#50#                        field.set(testClass, Mockito.mock(instance.getClass(), withSettings()
Mockito-32.fixed.lines	org/mockito/internal/configuration/SpyAnnotationEngine.java#51#                                .spiedInstance(instance)
Mockito-32.fixed.lines	org/mockito/internal/configuration/SpyAnnotationEngine.java#52#                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)
Mockito-32.fixed.lines	org/mockito/internal/configuration/SpyAnnotationEngine.java#53#                                .name(field.getName())));
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#3#import org.mockito.exceptions.Reporter;
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#11#        validateInput(durationMillis);
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#30#    private void validateInput(long durationMillis) {
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#31#        if (durationMillis < 0) {
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#32#            new Reporter().cannotCreateTimerWithNegativeDurationTime(durationMillis);
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#33#        }
Mockito-2.fixed.lines	org/mockito/internal/util/Timer.java#34#    }
Mockito-27.fixed.lines	org/mockito/internal/util/MockUtil.java#64#        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());
Mockito-15.fixed.lines	org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java#4#import org.mockito.internal.util.reflection.BeanPropertySetter;
Mockito-15.fixed.lines	org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java#26#                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {
Mockito-15.fixed.lines	org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java#28#                        }
Mockito-22.fixed.lines	org/mockito/internal/matchers/Equality.java#13#        if (o1 == o2 ) {
Mockito-22.fixed.lines	org/mockito/internal/matchers/Equality.java#14#            return true;
Mockito-22.fixed.lines	org/mockito/internal/matchers/Equality.java#15#	} else if (o1 == null || o2 == null) {
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#17#import org.mockito.mock.MockCreationSettings;
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#72#                newDeepStubMock(returnTypeGenericMetadata, invocation.getMock()),
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#88#    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#89#        MockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#92#                withSettingsUsing(returnTypeGenericMetadata, parentMockSettings)
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#96#    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#101#        return propagateSerializationSettings(mockSettings, parentMockSettings)
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#105#    private MockSettings propagateSerializationSettings(MockSettings mockSettings, MockCreationSettings parentMockSettings) {
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#106#        return mockSettings.serializable(parentMockSettings.getSerializableMode());
Mockito-10.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#107#    }
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java#114#            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java#13#import java.util.List;
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java#24#    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java#9#import java.util.List;
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java#16#            List<Field> fields, Object instance
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#23#			Field field, List<Field> fields, Object fieldInstance) {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#31#			return next.filterCandidate(mockNameMatches, field, fields,
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#42#		} else if (mocks.size() == 1) {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#43#			String mockName = mockUtil.getMockName(mocks.iterator().next())
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#44#					.toString();
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#45#
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#46#			for (Field otherField : fields) {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#47#				if (!otherField.equals(field)
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#48#						&& otherField.getType().equals(field.getType())
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#49#						&& otherField.getName().equals(mockName)) {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#50#
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#51#					return new OngoingInjecter() {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#52#						public Object thenInject() {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#53#							return null;
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#54#						}
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#55#					};
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#56#				}
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#57#			}
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#59#		return next.filterCandidate(mocks, field, fields, fieldInstance);
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java#20#    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {
Mockito-19.fixed.lines	org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java#28#        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);
Mockito-7.fixed.lines	org/mockito/internal/util/reflection/GenericMetadataSupport.java#379#            registerTypeParametersOn(new TypeVariable[] { typeVariable });
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#28#        if (answer instanceof CallsRealMethods) {
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#29#            validateMockingConcreteClass((CallsRealMethods) answer, invocation);
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#30#        }
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#33#    private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#34#        if (invocation.getMethod().getDeclaringClass().isInterface()) {
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#35#            reporter.cannotCallRealMethodOnInterface();
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#36#        }
Mockito-37.fixed.lines	org/mockito/internal/stubbing/answers/AnswersValidator.java#37#    }
Mockito-4.fixed.lines	org/mockito/exceptions/Reporter.java#424#                "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
Mockito-4.fixed.lines	org/mockito/exceptions/Reporter.java#434#                "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
Mockito-4.fixed.lines	org/mockito/exceptions/Reporter.java#677#        if (details.getCause() == null) {
Mockito-4.fixed.lines	org/mockito/exceptions/Reporter.java#678#            return details.getMessage();
Mockito-4.fixed.lines	org/mockito/exceptions/Reporter.java#679#        }
Mockito-34.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#106#            if (m instanceof CapturesArguments && i.getArguments().length > k) {
Mockito-28.fixed.lines	org/mockito/internal/configuration/DefaultInjectionEngine.java#93#            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
Mockito-28.fixed.lines	org/mockito/internal/configuration/DefaultInjectionEngine.java#94#            mocks.remove(injected);
Mockito-13.fixed.lines	org/mockito/internal/MockHandler.java#77#            if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                
Mockito-13.fixed.lines	org/mockito/internal/MockHandler.java#81#            } else {
Mockito-13.fixed.lines	org/mockito/internal/MockHandler.java#84#                mockingProgress.verificationStarted(verificationMode);
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#17#        return withParams(cls, outerClassInstance);
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#20#    private static <T> T withParams(Class<T> cls, Object... params) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#24#            for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#25#                Class<?>[] types = constructor.getParameterTypes();
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#26#                if (paramsMatch(types, params)) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#27#                    return (T) constructor.newInstance(params);
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#28#                }
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#29#            }
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#33#        throw paramsException(cls, null);
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#41#    private static boolean paramsMatch(Class<?>[] types, Object[] params) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#42#        if (params.length != types.length) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#43#            return false;
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#44#        }
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#45#        for (int i = 0; i < params.length; i++) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#46#            if (!types[i].isInstance(params[i])) {
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#47#                return false;
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#48#            }
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#49#        }
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#50#        return true;
Mockito-21.fixed.lines	org/mockito/internal/creation/instance/ConstructorInstantiator.java#51#    }
Mockito-16.fixed.lines	org/mockito/Mockito.java#827#        return MOCKITO_CORE.mock(classToMock, mockSettings, true);
Mockito-16.fixed.lines	org/mockito/Mockito.java#899#                .defaultAnswer(CALLS_REAL_METHODS), true); 
Mockito-16.fixed.lines	org/mockito/internal/MockitoCore.java#32#    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {
Mockito-16.fixed.lines	org/mockito/internal/MockitoCore.java#34#        if (shouldResetOngoingStubbing) {
Mockito-16.fixed.lines	org/mockito/internal/MockitoCore.java#36#        }
Mockito-8.fixed.lines	org/mockito/internal/util/reflection/GenericMetadataSupport.java#79#            } else if (typeParameter != actualTypeArgument) {
Mockito-38.fixed.lines	org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java#48#        return StringDescription.toString(m).equals(arg == null? "null" : arg.toString());
Mockito-24.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java#76#            return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;
Mockito-31.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#9#import java.util.Arrays;
Mockito-31.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#61#			String args = Arrays.toString(invocation.getArguments());
Mockito-31.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#62#			return invocation.getMethod().getName() + "(" + args.substring(1, args.length() - 1) +	")";
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#123#            for (int position = 0; position < indexOfVararg; position++) {
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#124#                Matcher m = matchers.get(position);
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#125#                if (m instanceof CapturesArguments) {
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#126#                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#127#                }
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#128#            }
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#129#            for (int position = indexOfVararg; position < matchers.size(); position++) {
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#130#                Matcher m = matchers.get(position);
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#131#                if (m instanceof CapturesArguments) {
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#132#                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#133#                }
Mockito-1.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#134#            }
Mockito-18.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java#87#        } else if (type == Iterable.class) {
Mockito-18.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java#88#            return new ArrayList<Object>(0);
Mockito-36.fixed.lines	org/mockito/internal/invocation/Invocation.java#11#import org.mockito.exceptions.Reporter;
Mockito-36.fixed.lines	org/mockito/internal/invocation/Invocation.java#203#        if (this.getMethod().getDeclaringClass().isInterface()) {
Mockito-36.fixed.lines	org/mockito/internal/invocation/Invocation.java#204#            new Reporter().cannotCallRealMethodOnInterface();
Mockito-36.fixed.lines	org/mockito/internal/invocation/Invocation.java#205#        }
Mockito-6.fixed.lines	org/mockito/Matchers.java#122#        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();
Mockito-6.fixed.lines	org/mockito/Matchers.java#137#        return reportMatcher(new InstanceOf(Byte.class)).returnZero();
Mockito-6.fixed.lines	org/mockito/Matchers.java#152#        return reportMatcher(new InstanceOf(Character.class)).returnChar();
Mockito-6.fixed.lines	org/mockito/Matchers.java#167#        return reportMatcher(new InstanceOf(Integer.class)).returnZero();
Mockito-6.fixed.lines	org/mockito/Matchers.java#182#        return reportMatcher(new InstanceOf(Long.class)).returnZero();
Mockito-6.fixed.lines	org/mockito/Matchers.java#197#        return reportMatcher(new InstanceOf(Float.class)).returnZero();
Mockito-6.fixed.lines	org/mockito/Matchers.java#212#        return reportMatcher(new InstanceOf(Double.class)).returnZero();
Mockito-6.fixed.lines	org/mockito/Matchers.java#227#        return reportMatcher(new InstanceOf(Short.class)).returnZero();
Mockito-6.fixed.lines	org/mockito/Matchers.java#244#        return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();
Mockito-6.fixed.lines	org/mockito/Matchers.java#292#        return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);
Mockito-6.fixed.lines	org/mockito/Matchers.java#309#        return (T) reportMatcher(Any.ANY).returnNull();
Mockito-6.fixed.lines	org/mockito/Matchers.java#324#        return reportMatcher(new InstanceOf(String.class)).returnString();
Mockito-6.fixed.lines	org/mockito/Matchers.java#339#        return reportMatcher(new InstanceOf(List.class)).returnList();
Mockito-6.fixed.lines	org/mockito/Matchers.java#358#        return anyList();
Mockito-6.fixed.lines	org/mockito/Matchers.java#373#        return reportMatcher(new InstanceOf(Set.class)).returnSet();
Mockito-6.fixed.lines	org/mockito/Matchers.java#392#        return anySet();
Mockito-6.fixed.lines	org/mockito/Matchers.java#407#        return reportMatcher(new InstanceOf(Map.class)).returnMap();
Mockito-6.fixed.lines	org/mockito/Matchers.java#427#        return anyMap();
Mockito-6.fixed.lines	org/mockito/Matchers.java#442#        return reportMatcher(new InstanceOf(Collection.class)).returnList();
Mockito-6.fixed.lines	org/mockito/Matchers.java#461#        return anyCollection();
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#55#        if (this == o) {
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#56#            return true;
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#57#        }
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#58#        if (o instanceof DelegatingMethod) {
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#59#            DelegatingMethod that = (DelegatingMethod) o;
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#60#            return method.equals(that.method);
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#61#        } else {
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#63#        }
Mockito-11.fixed.lines	org/mockito/internal/creation/DelegatingMethod.java#68#        return method.hashCode();
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#44#    private transient MockitoCore mockitoCore;
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#45#    private transient ReturnsEmptyValues delegate;
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#52#        instantiateMockitoCoreIfNeeded();
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#53#        instantiateDelegateIfNeeded();
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#61#    private synchronized void instantiateMockitoCoreIfNeeded() {
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#62#        if (mockitoCore == null) {
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#63#            mockitoCore = new MockitoCore();
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#64#        }
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#65#    }
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#67#    private synchronized void instantiateDelegateIfNeeded() {
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#68#        if (delegate == null) {
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#69#            delegate = new ReturnsEmptyValues();
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#70#        }
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#71#    }
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#112#		        .serializable()
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#127#        container.addAnswer(new SerializableAnswer() {
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#136#	abstract class SerializableAnswer implements Answer<Object>, Serializable {
Mockito-23.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#138#	}
Mockito-14.fixed.lines	org/mockito/internal/MockHandler.java#20#import org.mockito.internal.verification.MockAwareVerificationMode;
Mockito-14.fixed.lines	org/mockito/internal/MockHandler.java#77#            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
Mockito-14.fixed.lines	org/mockito/internal/MockHandler.java#81#            }
Mockito-14.fixed.lines	org/mockito/internal/MockitoCore.java#23#import org.mockito.internal.verification.MockAwareVerificationMode;
Mockito-14.fixed.lines	org/mockito/internal/MockitoCore.java#74#        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));
Mockito-26.fixed.lines	org/mockito/internal/util/Primitives.java#66#        primitiveValues.put(double.class, 0D);
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#127#            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#129#                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#130#                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#131#                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#132#                    }
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#145#    private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#146#        HashSet<Matcher> set = new HashSet<Matcher>();
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#147#        for (int position = indexOfVararg; position < matchers.size(); position++) {
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#148#            Matcher matcher = matchers.get(position);
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#149#            if(matcher instanceof MatcherDecorator) {
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#150#                set.add(((MatcherDecorator) matcher).getActualMatcher());
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#151#            } else {
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#152#                set.add(matcher);
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#153#            }
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#154#        }
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#155#        return set;
Mockito-3.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#156#    }
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#98#        if (m1.getName() != null && m1.getName().equals(m2.getName())) {
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#100#        	Class[] params1 = m1.getParameterTypes();
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#101#        	Class[] params2 = m2.getParameterTypes();
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#102#        	if (params1.length == params2.length) {
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#103#        	    for (int i = 0; i < params1.length; i++) {
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#104#        		if (params1[i] != params2[i])
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#105#        		    return false;
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#106#        	    }
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#107#        	    return true;
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#108#        	}
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#109#        }
Mockito-33.fixed.lines	org/mockito/internal/invocation/InvocationMatcher.java#110#        return false;
Mockito-30.fixed.lines	org/mockito/exceptions/Reporter.java#438#    public void smartNullPointerException(Object obj, Location location) {
Mockito-30.fixed.lines	org/mockito/exceptions/Reporter.java#442#                obj,
Mockito-30.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#56#            new Reporter().smartNullPointerException(obj, location);
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#7#import org.mockito.MockSettings;
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#20#import static org.mockito.Mockito.mock;
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#21#import static org.mockito.Mockito.withSettings;
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#56#        return getMock(invocation, returnTypeGenericMetadata);
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#59#    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#71#        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#80#    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#81#        return mock(
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#82#                returnTypeGenericMetadata.rawType(),
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#83#                withSettingsUsing(returnTypeGenericMetadata)
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#84#        );
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#85#    }
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#87#    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#88#        MockSettings mockSettings =
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#89#                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#90#                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#91#                : withSettings();
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#93#        return mockSettings
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#94#                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#95#    }
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#97#    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#98#        return new ReturnsDeepStubs() {
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#99#            @Override
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#100#            protected GenericMetadataSupport actualParameterizedType(Object mock) {
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#101#                return returnTypeGenericMetadata;
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#102#            }
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#103#        };
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#104#    }
Mockito-25.fixed.lines	org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#106#    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
Mockito-17.fixed.lines	org/mockito/internal/creation/MockSettingsImpl.java#20#    private boolean serializable;
Mockito-17.fixed.lines	org/mockito/internal/creation/MockSettingsImpl.java#23#        this.serializable = true;
Mockito-17.fixed.lines	org/mockito/internal/creation/MockSettingsImpl.java#24#        return this;
Mockito-17.fixed.lines	org/mockito/internal/creation/MockSettingsImpl.java#76#        return serializable;
Mockito-17.fixed.lines	org/mockito/internal/util/MockUtil.java#19#import java.io.Serializable;
Mockito-17.fixed.lines	org/mockito/internal/util/MockUtil.java#46#        if (settings.isSerializable()) {
Mockito-17.fixed.lines	org/mockito/internal/util/MockUtil.java#47#            ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);
Mockito-17.fixed.lines	org/mockito/internal/util/MockUtil.java#48#        } else {
Mockito-17.fixed.lines	org/mockito/internal/util/MockUtil.java#50#        }
Mockito-9.fixed.lines	org/mockito/internal/stubbing/answers/CallsRealMethods.java#8#import java.lang.reflect.Modifier;
Mockito-9.fixed.lines	org/mockito/internal/stubbing/answers/CallsRealMethods.java#10#import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;
Mockito-9.fixed.lines	org/mockito/internal/stubbing/answers/CallsRealMethods.java#38#    	if (Modifier.isAbstract(invocation.getMethod().getModifiers())) {
Mockito-9.fixed.lines	org/mockito/internal/stubbing/answers/CallsRealMethods.java#39#    		return new GloballyConfiguredAnswer().answer(invocation);
Mockito-9.fixed.lines	org/mockito/internal/stubbing/answers/CallsRealMethods.java#40#    	}
Mockito-20.fixed.lines	org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java#32#        Instantiator instantiator = new InstantiatorProvider().getInstantiator(settings);
Mockito-20.fixed.lines	org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java#35#            mockInstance = instantiator.newInstance(mockedProxyType);
Mockito-20.fixed.lines	org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java#46#                    "  instance creation by : " + instantiator.getClass().getSimpleName(),
Mockito-12.fixed.lines	org/mockito/internal/util/reflection/GenericMaster.java#20#            if (actual instanceof Class) {
Mockito-12.fixed.lines	org/mockito/internal/util/reflection/GenericMaster.java#22#            } else if (actual instanceof ParameterizedType) {
Mockito-12.fixed.lines	org/mockito/internal/util/reflection/GenericMaster.java#24#                return (Class) ((ParameterizedType) actual).getRawType();
Mockito-12.fixed.lines	org/mockito/internal/util/reflection/GenericMaster.java#25#            }
Mockito-29.fixed.lines	org/mockito/internal/matchers/Same.java#29#        description.appendText(wanted == null ? "null" : wanted.toString());
Mockito-35.fixed.lines	org/mockito/Matchers.java#362#        return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);
Mockito-35.fixed.lines	org/mockito/Matchers.java#479#        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());
Mockito-35.fixed.lines	org/mockito/Matchers.java#516#        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());
Mockito-5.fixed.lines	org/mockito/internal/verification/VerificationOverTimeImpl.java#91#            catch (AssertionError e) {
